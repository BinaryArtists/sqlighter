//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../../../android//com/vals/a2ios/amfibian/impl/AnSql.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vals/a2ios/amfibian/impl/AnAttrib.h"
#include "com/vals/a2ios/amfibian/impl/AnObject.h"
#include "com/vals/a2ios/amfibian/impl/AnSql.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Date.h"
#include "java/util/HashSet.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface ComValsA2iosAmfibianImplAnSql () {
 @public
  JavaLangStringBuilder *queryStr_;
  id<JavaUtilList> parameters_;
  jint type_;
  NSString *columnClause_;
  NSString *alias_;
  JavaLangStringBuilder *whereClause_;
  jboolean isWhere_;
  JavaLangStringBuilder *insertParamClause_;
  id<JavaUtilList> attribNameList_;
  id<JavaUtilSet> skipAttrNameList_;
  id<JavaUtilSet> inclAttrNameList_;
}

- (void)reset;

- (NSString *)getAlias;

- (NSString *)ensureFirstConditionWithNSString:(NSString *)condition;

@end

J2OBJC_FIELD_SETTER(ComValsA2iosAmfibianImplAnSql, queryStr_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(ComValsA2iosAmfibianImplAnSql, parameters_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComValsA2iosAmfibianImplAnSql, columnClause_, NSString *)
J2OBJC_FIELD_SETTER(ComValsA2iosAmfibianImplAnSql, alias_, NSString *)
J2OBJC_FIELD_SETTER(ComValsA2iosAmfibianImplAnSql, whereClause_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(ComValsA2iosAmfibianImplAnSql, insertParamClause_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(ComValsA2iosAmfibianImplAnSql, attribNameList_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComValsA2iosAmfibianImplAnSql, skipAttrNameList_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(ComValsA2iosAmfibianImplAnSql, inclAttrNameList_, id<JavaUtilSet>)

__attribute__((unused)) static void ComValsA2iosAmfibianImplAnSql_reset(ComValsA2iosAmfibianImplAnSql *self);

__attribute__((unused)) static NSString *ComValsA2iosAmfibianImplAnSql_getAlias(ComValsA2iosAmfibianImplAnSql *self);

__attribute__((unused)) static NSString *ComValsA2iosAmfibianImplAnSql_ensureFirstConditionWithNSString_(ComValsA2iosAmfibianImplAnSql *self, NSString *condition);

@implementation ComValsA2iosAmfibianImplAnSql

- (instancetype)initWithNSString:(NSString *)tableName
                    withIOSClass:(IOSClass *)anObjClass
withComValsA2iosAmfibianImplAnAttribArray:(IOSObjectArray *)attribList
withComValsA2iosAmfibianImplAnObject:(ComValsA2iosAmfibianImplAnObject *)parentAnObject {
  ComValsA2iosAmfibianImplAnSql_initWithNSString_withIOSClass_withComValsA2iosAmfibianImplAnAttribArray_withComValsA2iosAmfibianImplAnObject_(self, tableName, anObjClass, attribList, parentAnObject);
  return self;
}

- (instancetype)initWithNSString:(NSString *)tableName
                    withIOSClass:(IOSClass *)anObjClass
               withNSStringArray:(IOSObjectArray *)attribColumnList
withComValsA2iosAmfibianImplAnObject:(ComValsA2iosAmfibianImplAnObject *)parentAnObject {
  ComValsA2iosAmfibianImplAnSql_initWithNSString_withIOSClass_withNSStringArray_withComValsA2iosAmfibianImplAnObject_(self, tableName, anObjClass, attribColumnList, parentAnObject);
  return self;
}

- (id<JavaUtilSet>)getSkipAttrNameList {
  return skipAttrNameList_;
}

- (void)resetSkipInclAttrNameList {
  [((id<JavaUtilSet>) nil_chk(skipAttrNameList_)) clear];
  [((id<JavaUtilSet>) nil_chk(inclAttrNameList_)) clear];
}

- (void)addInclAttribsWithNSStringArray:(IOSObjectArray *)names {
  id<JavaUtilList> nms = JavaUtilArrays_asListWithNSObjectArray_(names);
  [((id<JavaUtilSet>) nil_chk(inclAttrNameList_)) addAllWithJavaUtilCollection:nms];
  [((id<JavaUtilSet>) nil_chk(skipAttrNameList_)) clear];
}

- (void)addSkipAttribsWithNSStringArray:(IOSObjectArray *)names {
  id<JavaUtilList> nms = JavaUtilArrays_asListWithNSObjectArray_(names);
  [((id<JavaUtilSet>) nil_chk(skipAttrNameList_)) addAllWithJavaUtilCollection:nms];
}

- (NSString *)getTableName {
  return tableName_;
}

- (void)setTableNameWithNSString:(NSString *)tableName {
  self->tableName_ = tableName;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComValsA2iosAmfibianImplAnSql_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilList>)getParameters {
  return parameters_;
}

- (id<JavaUtilList>)getAttribNameList {
  return attribNameList_;
}

- (jint)getType {
  return type_;
}

- (void)setTypeWithInt:(jint)type {
  self->type_ = type;
}

- (void)reset {
  ComValsA2iosAmfibianImplAnSql_reset(self);
}

- (jboolean)isSkipAttrWithNSString:(NSString *)propertyName {
  if ([((id<JavaUtilSet>) nil_chk(inclAttrNameList_)) size] > 0) {
    if ([inclAttrNameList_ containsWithId:propertyName]) {
      return false;
    }
    else {
      return true;
    }
  }
  else if ([((id<JavaUtilSet>) nil_chk([self getSkipAttrNameList])) size] > 0) {
    if (![((id<JavaUtilSet>) nil_chk([self getSkipAttrNameList])) containsWithId:propertyName]) {
      return true;
    }
    else {
      return false;
    }
  }
  return false;
}

- (void)startSqlDelete {
  ComValsA2iosAmfibianImplAnSql_reset(self);
  type_ = ComValsA2iosAmfibianImplAnSql_TYPE_DELETE;
}

- (void)startSqlInsertWithId:(id)objectToInsert {
  ComValsA2iosAmfibianImplAnSql_reset(self);
  [self setNativeObjectWithId:objectToInsert];
  type_ = ComValsA2iosAmfibianImplAnSql_TYPE_INSERT;
  insertParamClause_ = new_JavaLangStringBuilder_init();
  id<JavaUtilMap> om = [self getAttribList];
  id<JavaUtilSet> attrNames = [((id<JavaUtilMap>) nil_chk(om)) keySet];
  for (NSString * __strong attrName in nil_chk(attrNames)) {
    if (![self isSkipAttrWithNSString:attrName]) {
      ComValsA2iosAmfibianImplAnAttrib *attr = [om getWithId:attrName];
      id value = [((ComValsA2iosAmfibianImplAnAttrib *) nil_chk(attr)) getValue];
      if (value != nil) {
        (void) [((JavaLangStringBuilder *) nil_chk(queryStr_)) appendWithNSString:[self getColumnNameWithComValsA2iosAmfibianImplAnAttrib:attr]];
        [((id<JavaUtilList>) nil_chk(parameters_)) addWithId:value];
        (void) [insertParamClause_ appendWithNSString:@"?"];
      }
      else {
        (void) [((JavaLangStringBuilder *) nil_chk(queryStr_)) appendWithNSString:[self getColumnNameWithComValsA2iosAmfibianImplAnAttrib:attr]];
        (void) [insertParamClause_ appendWithNSString:@"NULL"];
      }
      [((id<JavaUtilList>) nil_chk(attribNameList_)) addWithId:attrName];
      (void) [((JavaLangStringBuilder *) nil_chk(queryStr_)) appendWithChar:','];
      (void) [insertParamClause_ appendWithNSString:@","];
    }
  }
  (void) [queryStr_ replaceWithInt:[((JavaLangStringBuilder *) nil_chk(queryStr_)) length] - 1 withInt:[queryStr_ length] withNSString:@" "];
  (void) [insertParamClause_ replaceWithInt:[insertParamClause_ length] - 1 withInt:[insertParamClause_ length] withNSString:@" "];
  columnClause_ = [queryStr_ description];
}

- (void)startSqlUpdateWithId:(id)objectToUpdate {
  ComValsA2iosAmfibianImplAnSql_reset(self);
  [self setNativeObjectWithId:objectToUpdate];
  type_ = ComValsA2iosAmfibianImplAnSql_TYPE_UPDATE;
  id<JavaUtilMap> om = [self getAttribList];
  id<JavaUtilSet> attrNames = [((id<JavaUtilMap>) nil_chk(om)) keySet];
  for (NSString * __strong attrName in nil_chk(attrNames)) {
    if (![self isSkipAttrWithNSString:attrName]) {
      ComValsA2iosAmfibianImplAnAttrib *attrib = [om getWithId:attrName];
      if (attrib != nil) {
        (void) [((JavaLangStringBuilder *) nil_chk(queryStr_)) appendWithNSString:JreStrcat("$$", [self getColumnNameWithComValsA2iosAmfibianImplAnAttrib:attrib], @" = ?")];
        [((id<JavaUtilList>) nil_chk(parameters_)) addWithId:[attrib getValue]];
      }
      else {
        (void) [((JavaLangStringBuilder *) nil_chk(queryStr_)) appendWithNSString:JreStrcat("$$", [self getColumnNameWithComValsA2iosAmfibianImplAnAttrib:attrib], @" = NULL")];
      }
      [((id<JavaUtilList>) nil_chk(attribNameList_)) addWithId:attrName];
      (void) [((JavaLangStringBuilder *) nil_chk(queryStr_)) appendWithChar:','];
    }
  }
  (void) [queryStr_ replaceWithInt:[((JavaLangStringBuilder *) nil_chk(queryStr_)) length] - 1 withInt:[queryStr_ length] withNSString:@" "];
  columnClause_ = [queryStr_ description];
}

- (NSString *)getColumnNameWithComValsA2iosAmfibianImplAnAttrib:(ComValsA2iosAmfibianImplAnAttrib *)attrib {
  return [((ComValsA2iosAmfibianImplAnAttrib *) nil_chk(attrib)) getColumnOrAttribName];
}

- (ComValsA2iosAmfibianImplAnSql *)startSqlCreate {
  ComValsA2iosAmfibianImplAnSql_reset(self);
  type_ = ComValsA2iosAmfibianImplAnSql_TYPE_CREATE;
  id<JavaUtilMap> cm = [self getAttribList];
  id<JavaUtilSet> attribNames = [((id<JavaUtilMap>) nil_chk(cm)) keySet];
  for (NSString * __strong attribName in nil_chk(attribNames)) {
    ComValsA2iosAmfibianImplAnAttrib *attr = [cm getWithId:attribName];
    NSString *colName = [self getColumnNameWithComValsA2iosAmfibianImplAnAttrib:attr];
    (void) [((JavaLangStringBuilder *) nil_chk(queryStr_)) appendWithNSString:colName];
    NSString *columnType = [self getSqlTypeForClassWithIOSClass:[((ComValsA2iosAmfibianImplAnAttrib *) nil_chk(attr)) getAttribClass]];
    (void) [queryStr_ appendWithNSString:JreStrcat("C$", ' ', columnType)];
    (void) [queryStr_ appendWithChar:','];
  }
  (void) [queryStr_ replaceWithInt:[((JavaLangStringBuilder *) nil_chk(queryStr_)) length] - 1 withInt:[queryStr_ length] withNSString:@" "];
  columnClause_ = [queryStr_ description];
  return self;
}

- (NSString *)getSqlTypeForClassWithIOSClass:(IOSClass *)columnJavaClass {
  if (columnJavaClass != nil) {
    NSString *className_ = [columnJavaClass getCanonicalName];
    if ([((NSString *) nil_chk([JavaLangLong_class_() getCanonicalName])) isEqual:className_]) {
      return @"INTEGER";
    }
    else if ([((NSString *) nil_chk([JavaLangInteger_class_() getCanonicalName])) isEqual:className_]) {
      return @"INTEGER";
    }
    else if ([((NSString *) nil_chk([JavaLangShort_class_() getCanonicalName])) isEqual:className_]) {
      return @"INTEGER";
    }
    else if ([((NSString *) nil_chk([JavaLangFloat_class_() getCanonicalName])) isEqual:className_]) {
      return @"REAL";
    }
    else if ([((NSString *) nil_chk([JavaLangDouble_class_() getCanonicalName])) isEqual:className_]) {
      return @"REAL";
    }
    else if ([((NSString *) nil_chk([NSString_class_() getCanonicalName])) isEqual:className_]) {
      return @"TEXT";
    }
    else if ([((NSString *) nil_chk([JavaUtilDate_class_() getCanonicalName])) isEqual:className_]) {
      return @"TEXT";
    }
  }
  return @"TEXT";
}

- (NSString *)getAlias {
  return ComValsA2iosAmfibianImplAnSql_getAlias(self);
}

- (NSString *)getAliasedColumnWithNSString:(NSString *)columnName {
  return JreStrcat("$C$", alias_, '.', columnName);
}

- (void)startSqlSelect {
  ComValsA2iosAmfibianImplAnSql_reset(self);
  type_ = ComValsA2iosAmfibianImplAnSql_TYPE_SELECT;
  alias_ = JreStrcat("$C", tableName_, '0');
  id<JavaUtilMap> cm = [self getAttribList];
  id<JavaUtilSet> propertyNames = [((id<JavaUtilMap>) nil_chk(cm)) keySet];
  for (NSString * __strong pName in nil_chk(propertyNames)) {
    if (![self isSkipAttrWithNSString:pName]) {
      NSString *colName = [self getColumnNameWithComValsA2iosAmfibianImplAnAttrib:[cm getWithId:pName]];
      (void) [((JavaLangStringBuilder *) nil_chk(queryStr_)) appendWithNSString:alias_];
      (void) [queryStr_ appendWithChar:'.'];
      (void) [queryStr_ appendWithNSString:colName];
      [((id<JavaUtilList>) nil_chk(attribNameList_)) addWithId:pName];
      (void) [queryStr_ appendWithChar:','];
    }
  }
  (void) [queryStr_ replaceWithInt:[((JavaLangStringBuilder *) nil_chk(queryStr_)) length] - 1 withInt:[queryStr_ length] withNSString:@" "];
  columnClause_ = [queryStr_ description];
}

- (NSString *)ensureFirstConditionWithNSString:(NSString *)condition {
  return ComValsA2iosAmfibianImplAnSql_ensureFirstConditionWithNSString_(self, condition);
}

- (void)addWhereWithNSString:(NSString *)condition
                      withId:(id)param {
  if (param != nil) {
    [self addWhereWithNSString:condition];
    [((id<JavaUtilList>) nil_chk(parameters_)) addWithId:param];
  }
}

- (void)addWhereWithNSString:(NSString *)condition {
  condition = ComValsA2iosAmfibianImplAnSql_ensureFirstConditionWithNSString_(self, condition);
  isWhere_ = true;
  [self addSqlWithNSString:condition];
}

- (void)addSqlWithNSString:(NSString *)sql {
  if (whereClause_ == nil) {
    whereClause_ = new_JavaLangStringBuilder_init();
  }
  queryStr_ = new_JavaLangStringBuilder_init();
  (void) [queryStr_ appendWithChar:' '];
  (void) [queryStr_ appendWithNSString:sql];
  (void) [queryStr_ appendWithChar:' '];
  (void) [((JavaLangStringBuilder *) nil_chk(whereClause_)) appendWithJavaLangCharSequence:queryStr_];
}

- (NSString *)getQueryString {
  if (type_ == ComValsA2iosAmfibianImplAnSql_TYPE_CREATE) {
    JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
    (void) [sb appendWithNSString:@"create table "];
    (void) [sb appendWithNSString:tableName_];
    (void) [sb appendWithChar:'('];
    (void) [sb appendWithNSString:columnClause_];
    (void) [sb appendWithChar:')'];
    return [sb description];
  }
  else if (type_ == ComValsA2iosAmfibianImplAnSql_TYPE_SELECT) {
    JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
    (void) [sb appendWithNSString:@"select "];
    (void) [sb appendWithNSString:columnClause_];
    (void) [sb appendWithNSString:@" from "];
    (void) [sb appendWithNSString:JreStrcat("$C$", tableName_, ' ', alias_)];
    if (isWhere_) {
      (void) [sb appendWithNSString:@" where "];
    }
    if (whereClause_ != nil) {
      (void) [sb appendWithJavaLangCharSequence:whereClause_];
    }
    NSString *qString = [sb description];
    qString = [((NSString *) nil_chk(qString)) replaceAll:@"#" withReplacement:ComValsA2iosAmfibianImplAnSql_getAlias(self)];
    return qString;
  }
  else if (type_ == ComValsA2iosAmfibianImplAnSql_TYPE_UPDATE) {
    JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
    (void) [sb appendWithNSString:@"update "];
    (void) [sb appendWithNSString:JreStrcat("$C", tableName_, ' ')];
    (void) [sb appendWithNSString:@"set "];
    (void) [sb appendWithNSString:columnClause_];
    if (whereClause_ != nil) {
      (void) [sb appendWithNSString:@" where "];
      (void) [sb appendWithJavaLangCharSequence:whereClause_];
    }
    return [sb description];
  }
  else if (type_ == ComValsA2iosAmfibianImplAnSql_TYPE_INSERT) {
    JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
    (void) [sb appendWithNSString:@"INSERT INTO "];
    (void) [sb appendWithNSString:tableName_];
    (void) [sb appendWithChar:'('];
    (void) [sb appendWithNSString:columnClause_];
    (void) [sb appendWithNSString:@") VALUES ("];
    (void) [sb appendWithJavaLangCharSequence:insertParamClause_];
    (void) [sb appendWithChar:')'];
    return [sb description];
  }
  else if (type_ == ComValsA2iosAmfibianImplAnSql_TYPE_DELETE) {
    JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
    (void) [sb appendWithNSString:@"DELETE FROM "];
    (void) [sb appendWithNSString:tableName_];
    if (whereClause_ != nil) {
      (void) [sb appendWithNSString:@" where "];
      (void) [sb appendWithJavaLangCharSequence:whereClause_];
    }
    return [sb description];
  }
  return nil;
}

@end

void ComValsA2iosAmfibianImplAnSql_initWithNSString_withIOSClass_withComValsA2iosAmfibianImplAnAttribArray_withComValsA2iosAmfibianImplAnObject_(ComValsA2iosAmfibianImplAnSql *self, NSString *tableName, IOSClass *anObjClass, IOSObjectArray *attribList, ComValsA2iosAmfibianImplAnObject *parentAnObject) {
  (void) ComValsA2iosAmfibianImplAnObject_initWithIOSClass_withComValsA2iosAmfibianImplAnAttribArray_withComValsA2iosAmfibianImplAnObject_(self, anObjClass, attribList, parentAnObject);
  self->parameters_ = new_JavaUtilArrayList_init();
  self->alias_ = @"";
  self->isWhere_ = false;
  self->attribNameList_ = new_JavaUtilLinkedList_init();
  self->skipAttrNameList_ = new_JavaUtilHashSet_init();
  self->inclAttrNameList_ = new_JavaUtilHashSet_init();
  self->tableName_ = tableName;
}

ComValsA2iosAmfibianImplAnSql *new_ComValsA2iosAmfibianImplAnSql_initWithNSString_withIOSClass_withComValsA2iosAmfibianImplAnAttribArray_withComValsA2iosAmfibianImplAnObject_(NSString *tableName, IOSClass *anObjClass, IOSObjectArray *attribList, ComValsA2iosAmfibianImplAnObject *parentAnObject) {
  ComValsA2iosAmfibianImplAnSql *self = [ComValsA2iosAmfibianImplAnSql alloc];
  ComValsA2iosAmfibianImplAnSql_initWithNSString_withIOSClass_withComValsA2iosAmfibianImplAnAttribArray_withComValsA2iosAmfibianImplAnObject_(self, tableName, anObjClass, attribList, parentAnObject);
  return self;
}

void ComValsA2iosAmfibianImplAnSql_initWithNSString_withIOSClass_withNSStringArray_withComValsA2iosAmfibianImplAnObject_(ComValsA2iosAmfibianImplAnSql *self, NSString *tableName, IOSClass *anObjClass, IOSObjectArray *attribColumnList, ComValsA2iosAmfibianImplAnObject *parentAnObject) {
  (void) ComValsA2iosAmfibianImplAnObject_initWithIOSClass_withNSStringArray_withComValsA2iosAmfibianImplAnObject_(self, anObjClass, attribColumnList, parentAnObject);
  self->parameters_ = new_JavaUtilArrayList_init();
  self->alias_ = @"";
  self->isWhere_ = false;
  self->attribNameList_ = new_JavaUtilLinkedList_init();
  self->skipAttrNameList_ = new_JavaUtilHashSet_init();
  self->inclAttrNameList_ = new_JavaUtilHashSet_init();
  self->tableName_ = tableName;
}

ComValsA2iosAmfibianImplAnSql *new_ComValsA2iosAmfibianImplAnSql_initWithNSString_withIOSClass_withNSStringArray_withComValsA2iosAmfibianImplAnObject_(NSString *tableName, IOSClass *anObjClass, IOSObjectArray *attribColumnList, ComValsA2iosAmfibianImplAnObject *parentAnObject) {
  ComValsA2iosAmfibianImplAnSql *self = [ComValsA2iosAmfibianImplAnSql alloc];
  ComValsA2iosAmfibianImplAnSql_initWithNSString_withIOSClass_withNSStringArray_withComValsA2iosAmfibianImplAnObject_(self, tableName, anObjClass, attribColumnList, parentAnObject);
  return self;
}

void ComValsA2iosAmfibianImplAnSql_init(ComValsA2iosAmfibianImplAnSql *self) {
  (void) ComValsA2iosAmfibianImplAnObject_init(self);
  self->parameters_ = new_JavaUtilArrayList_init();
  self->alias_ = @"";
  self->isWhere_ = false;
  self->attribNameList_ = new_JavaUtilLinkedList_init();
  self->skipAttrNameList_ = new_JavaUtilHashSet_init();
  self->inclAttrNameList_ = new_JavaUtilHashSet_init();
}

ComValsA2iosAmfibianImplAnSql *new_ComValsA2iosAmfibianImplAnSql_init() {
  ComValsA2iosAmfibianImplAnSql *self = [ComValsA2iosAmfibianImplAnSql alloc];
  ComValsA2iosAmfibianImplAnSql_init(self);
  return self;
}

void ComValsA2iosAmfibianImplAnSql_reset(ComValsA2iosAmfibianImplAnSql *self) {
  self->queryStr_ = new_JavaLangStringBuilder_init();
  self->isWhere_ = false;
  self->whereClause_ = nil;
  [((id<JavaUtilList>) nil_chk(self->parameters_)) clear];
  [((id<JavaUtilList>) nil_chk(self->attribNameList_)) clear];
}

NSString *ComValsA2iosAmfibianImplAnSql_getAlias(ComValsA2iosAmfibianImplAnSql *self) {
  return self->alias_;
}

NSString *ComValsA2iosAmfibianImplAnSql_ensureFirstConditionWithNSString_(ComValsA2iosAmfibianImplAnSql *self, NSString *condition) {
  if (self->whereClause_ == nil) {
    if ([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk(condition)) trim])) lowercaseString])) hasPrefix:@"and "]) {
      condition = [((NSString *) nil_chk([condition trim])) substring:4];
    }
    if ([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk(condition)) trim])) lowercaseString])) hasPrefix:@"or "]) {
      condition = [((NSString *) nil_chk([condition trim])) substring:3];
    }
    self->whereClause_ = new_JavaLangStringBuilder_init();
  }
  return condition;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComValsA2iosAmfibianImplAnSql)
