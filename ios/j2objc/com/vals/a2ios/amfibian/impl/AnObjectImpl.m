//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../../../android//com/vals/a2ios/amfibian/impl/AnObjectImpl.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vals/a2ios/amfibian/impl/AnAttribImpl.h"
#include "com/vals/a2ios/amfibian/impl/AnObjectImpl.h"
#include "com/vals/a2ios/amfibian/intf/AnAdapter.h"
#include "com/vals/a2ios/amfibian/intf/AnAttrib.h"
#include "com/vals/a2ios/amfibian/intf/AnObject.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/Method.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/json/JSONArray.h"
#include "org/json/JSONObject.h"

@interface AnObjectImpl () {
 @public
  id<AnObject> parentAnObject_;
  id<JavaUtilMap> nativeObjectMap_;
  id<JavaUtilMap> jsonMap_;
  id nativeObject_;
  id<JavaUtilMap> attribMap_;
  id<AnAdapter> jsonGetAdapter_;
  id<AnAdapter> jsonSetAdapter_;
}

@end

J2OBJC_FIELD_SETTER(AnObjectImpl, parentAnObject_, id<AnObject>)
J2OBJC_FIELD_SETTER(AnObjectImpl, nativeObjectMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(AnObjectImpl, jsonMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(AnObjectImpl, nativeObject_, id)
J2OBJC_FIELD_SETTER(AnObjectImpl, attribMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(AnObjectImpl, jsonGetAdapter_, id<AnAdapter>)
J2OBJC_FIELD_SETTER(AnObjectImpl, jsonSetAdapter_, id<AnAdapter>)

__attribute__((unused)) static void AnObjectImpl_clearMaps(AnObjectImpl *self);

__attribute__((unused)) static jboolean AnObjectImpl_isEmptyWithJavaUtilMap_(AnObjectImpl *self, id<JavaUtilMap> map);

__attribute__((unused)) static id<JavaUtilMap> AnObjectImpl_ensureMapWithJavaUtilMap_(AnObjectImpl *self, id<JavaUtilMap> map);

__attribute__((unused)) static IOSObjectArray *AnObjectImpl_stringsToAttribsWithNSStringArray_(AnObjectImpl *self, IOSObjectArray *attribNames);

__attribute__((unused)) static void AnObjectImpl_initAttribsWithAnAttribArray_(AnObjectImpl *self, IOSObjectArray *attribs);

@implementation AnObjectImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AnObjectImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithIOSClass:(IOSClass *)anObjClass
                    withAnObject:(id<AnObject>)parentAnObject {
  AnObjectImpl_initWithIOSClass_withAnObject_(self, anObjClass, parentAnObject);
  return self;
}

- (instancetype)initWithIOSClass:(IOSClass *)anObjClass
               withNSStringArray:(IOSObjectArray *)propertyNames
                    withAnObject:(id<AnObject>)parentAnObject {
  AnObjectImpl_initWithIOSClass_withNSStringArray_withAnObject_(self, anObjClass, propertyNames, parentAnObject);
  return self;
}

- (instancetype)initWithIOSClass:(IOSClass *)anObjClass
               withAnAttribArray:(IOSObjectArray *)propertyMappers
                    withAnObject:(id<AnObject>)parentAnObject {
  AnObjectImpl_initWithIOSClass_withAnAttribArray_withAnObject_(self, anObjClass, propertyMappers, parentAnObject);
  return self;
}

- (instancetype)initWithIOSClass:(IOSClass *)anObjClass
               withNSStringArray:(IOSObjectArray *)propertyNames {
  AnObjectImpl_initWithIOSClass_withNSStringArray_(self, anObjClass, propertyNames);
  return self;
}

- (instancetype)initWithIOSClass:(IOSClass *)anObjClass
               withAnAttribArray:(IOSObjectArray *)propertyMappers {
  AnObjectImpl_initWithIOSClass_withAnAttribArray_(self, anObjClass, propertyMappers);
  return self;
}

- (void)init__WithIOSClass:(IOSClass *)anObjClass
              withAnObject:(id<AnObject>)parentMapper {
  self->parentAnObject_ = parentMapper;
  [self setNativeClassWithIOSClass:anObjClass];
  [self initConverters];
}

- (void)init__WithIOSClass:(IOSClass *)anObjClass
         withAnAttribArray:(IOSObjectArray *)propertyMappers
              withAnObject:(id<AnObject>)parentMapper {
  [self init__WithIOSClass:anObjClass withAnObject:parentMapper];
  AnObjectImpl_initAttribsWithAnAttribArray_(self, propertyMappers);
}

- (void)init__WithIOSClass:(IOSClass *)anObjClass
         withAnAttribArray:(IOSObjectArray *)propertyMappers {
  AnObjectImpl_initAttribsWithAnAttribArray_(self, propertyMappers);
  [self setNativeClassWithIOSClass:anObjClass];
  [self initConverters];
}

- (void)init__WithIOSClass:(IOSClass *)anObjClass
         withNSStringArray:(IOSObjectArray *)propertyNames
              withAnObject:(id<AnObject>)parentMapper {
  self->parentAnObject_ = parentMapper;
  [self init__WithIOSClass:anObjClass withNSStringArray:propertyNames];
}

- (void)init__WithIOSClass:(IOSClass *)anObjClass
         withNSStringArray:(IOSObjectArray *)propertyNames {
  IOSObjectArray *list = AnObjectImpl_stringsToAttribsWithNSStringArray_(self, propertyNames);
  [self init__WithIOSClass:anObjClass withAnAttribArray:list];
}

- (void)initConverters {
  jsonGetAdapter_ = new_AnObjectImpl_SampleGetAdapter_init();
  jsonSetAdapter_ = new_AnObjectImpl_SampleSetAdapter_init();
}

- (id<AnObject>)getParentAnObject {
  return parentAnObject_;
}

- (void)setParentAnObjectWithAnObject:(id<AnObject>)parentObject {
  self->parentAnObject_ = parentObject;
}

- (void)resetNativeObject {
  [self setNativeObjectWithId:[((IOSClass *) nil_chk(nativeClass_)) newInstance]];
}

- (void)setNativeObjectWithId:(id)o {
  self->nativeObject_ = o;
  AnObjectImpl_clearMaps(self);
  if (parentAnObject_ != nil) {
    [parentAnObject_ setNativeObjectWithId:o];
  }
}

- (id)getNativeObject {
  return nativeObject_;
}

- (IOSClass *)getNativeClass {
  return nativeClass_;
}

- (id<JavaUtilMap>)getAllAttribMap {
  id<JavaUtilMap> p = new_JavaUtilHashMap_init();
  if (parentAnObject_ != nil) {
    [p putAllWithJavaUtilMap:[parentAnObject_ getAllAttribMap]];
  }
  if (attribMap_ != nil) {
    [p putAllWithJavaUtilMap:attribMap_];
  }
  return p;
}

- (IOSObjectArray *)getAllAttribs {
  id<JavaUtilMap> map = [self getAllAttribMap];
  IOSObjectArray *attribs = [IOSObjectArray newArrayWithLength:[((id<JavaUtilMap>) nil_chk(map)) size] type:AnAttrib_class_()];
  id<JavaUtilSet> keys = [map keySet];
  jint i = 0;
  for (NSString * __strong key in nil_chk(keys)) {
    (void) IOSObjectArray_Set(attribs, i++, [map getWithId:key]);
  }
  return attribs;
}

- (IOSObjectArray *)getOwnAttribs {
  id<JavaUtilMap> map = attribMap_;
  IOSObjectArray *attribs = [IOSObjectArray newArrayWithLength:[((id<JavaUtilMap>) nil_chk(map)) size] type:AnAttrib_class_()];
  id<JavaUtilSet> keys = [map keySet];
  jint i = 0;
  for (NSString * __strong key in nil_chk(keys)) {
    (void) IOSObjectArray_Set(attribs, i++, [map getWithId:key]);
  }
  return attribs;
}

- (id<AnAttrib>)getAttribWithNSString:(NSString *)attribName {
  id<AnAttrib> a = [((id<JavaUtilMap>) nil_chk(attribMap_)) getWithId:attribName];
  if (a == nil && parentAnObject_ != nil) {
    a = [parentAnObject_ getAttribWithNSString:attribName];
  }
  return a;
}

- (void)setNativeClassWithIOSClass:(IOSClass *)anObjClass {
  self->nativeClass_ = anObjClass;
  IOSClass *superClass = [((IOSClass *) nil_chk(anObjClass)) getSuperclass];
  if (superClass != nil) {
    if (parentAnObject_ != nil) {
      [parentAnObject_ setNativeClassWithIOSClass:superClass];
    }
  }
}

- (void)setOwnAttribsWithAnAttribArray:(IOSObjectArray *)attribs {
  AnObjectImpl_initAttribsWithAnAttribArray_(self, attribs);
}

- (void)addAttribWithAnAttrib:(id<AnAttrib>)anAttrib {
  [((id<AnAttrib>) nil_chk(anAttrib)) setAnObjectWithAnObject:self];
  (void) [((id<JavaUtilMap>) nil_chk(attribMap_)) putWithId:[anAttrib getAttribName] withId:anAttrib];
}

- (id<JavaUtilMap>)asJsonMap {
  if (AnObjectImpl_isEmptyWithJavaUtilMap_(self, jsonMap_)) {
    jsonMap_ = AnObjectImpl_ensureMapWithJavaUtilMap_(self, jsonMap_);
    id<JavaUtilSet> p = [((id<JavaUtilMap>) nil_chk(attribMap_)) keySet];
    for (NSString * __strong attrName in nil_chk(p)) {
      id<AnAttrib> attr = [((id<JavaUtilMap>) nil_chk(attribMap_)) getWithId:attrName];
      if ([((id<AnAttrib>) nil_chk(attr)) getJsonName] != nil) {
        id value = [self getValueWithAnAdapter:[attr getJsonGetAdapter] withAnAdapter:jsonGetAdapter_ withAnAttrib:attr];
        if (value != nil) {
          (void) [((id<JavaUtilMap>) nil_chk(jsonMap_)) putWithId:[attr getJsonName] withId:value];
        }
      }
    }
  }
  if (parentAnObject_ != nil) {
    id<JavaUtilMap> parentJsonMap = [parentAnObject_ asJsonMap];
    id<JavaUtilSet> keys = [((id<JavaUtilMap>) nil_chk(parentJsonMap)) keySet];
    for (NSString * __strong k in nil_chk(keys)) {
      (void) [((id<JavaUtilMap>) nil_chk(jsonMap_)) putWithId:k withId:[parentJsonMap getWithId:k]];
    }
  }
  return jsonMap_;
}

- (id<JavaUtilMap>)getMapWithId:(id)nativeObject {
  @synchronized(self) {
    return [self asNativeMapWithId:nativeObject];
  }
}

- (id<JavaUtilMap>)asNativeMapWithId:(id)nativeObject {
  @synchronized(self) {
    [self setNativeObjectWithId:nativeObject];
    if (AnObjectImpl_isEmptyWithJavaUtilMap_(self, nativeObjectMap_)) {
      nativeObjectMap_ = AnObjectImpl_ensureMapWithJavaUtilMap_(self, nativeObjectMap_);
      id<JavaUtilSet> p = [((id<JavaUtilMap>) nil_chk(attribMap_)) keySet];
      for (NSString * __strong pName in nil_chk(p)) {
        id<AnAttrib> pm = [((id<JavaUtilMap>) nil_chk(attribMap_)) getWithId:pName];
        id value = [((id<AnAttrib>) nil_chk(pm)) getValueWithAnAdapter:nil];
        if (value != nil) {
          (void) [((id<JavaUtilMap>) nil_chk(nativeObjectMap_)) putWithId:pName withId:value];
        }
      }
    }
    if (parentAnObject_ != nil) {
      id<JavaUtilMap> parentMap = [parentAnObject_ asNativeMapWithId:nativeObject];
      id<JavaUtilSet> keys = [((id<JavaUtilMap>) nil_chk(parentMap)) keySet];
      for (NSString * __strong k in nil_chk(keys)) {
        (void) [((id<JavaUtilMap>) nil_chk(nativeObjectMap_)) putWithId:k withId:[parentMap getWithId:k]];
      }
    }
    return nativeObjectMap_;
  }
}

- (OrgJsonJSONObject *)asJSONObjectWithId:(id)nativeObject {
  @synchronized(self) {
    [self setNativeObjectWithId:nativeObject];
    (void) [self getMapWithId:nativeObject];
    return new_OrgJsonJSONObject_initWithJavaUtilMap_([self asJsonMap]);
  }
}

- (id)asNativeObjectWithOrgJsonJSONObject:(OrgJsonJSONObject *)jsonObject {
  @synchronized(self) {
    if (nativeObject_ == nil) {
      [self resetNativeObject];
    }
    if (parentAnObject_ != nil) {
      (void) [parentAnObject_ asNativeObjectWithOrgJsonJSONObject:jsonObject];
    }
    id<JavaUtilSet> attrObjsKeys = [((id<JavaUtilMap>) nil_chk(attribMap_)) keySet];
    for (NSString * __strong attribName in nil_chk(attrObjsKeys)) {
      id<AnAttrib> attr = [((id<JavaUtilMap>) nil_chk(attribMap_)) getWithId:attribName];
      if ([((id<AnAttrib>) nil_chk(attr)) getJsonName] != nil) {
        if (![((OrgJsonJSONObject *) nil_chk(jsonObject)) isNullWithNSString:[attr getJsonName]]) {
          id attrValue = [jsonObject getWithNSString:[attr getJsonName]];
          if (attrValue != nil) {
            [self setValueWithAnAdapter:[attr getJsonSetAdapter] withAnAdapter:jsonSetAdapter_ withAnAttrib:attr withId:attrValue];
          }
        }
      }
    }
    return nativeObject_;
  }
}

- (void)setValueWithAnAdapter:(id<AnAdapter>)attribConverter
                withAnAdapter:(id<AnAdapter>)objectConverter
                 withAnAttrib:(id<AnAttrib>)attrib
                       withId:(id)value {
  if (attribConverter != nil) {
    [((id<AnAttrib>) nil_chk(attrib)) setValueWithId:[attribConverter convertWithAnAttrib:attrib withId:value]];
    return;
  }
  if (objectConverter != nil) {
    [((id<AnAttrib>) nil_chk(attrib)) setValueWithId:[objectConverter convertWithAnAttrib:attrib withId:value]];
    return;
  }
  [((id<AnAttrib>) nil_chk(attrib)) setValueWithId:value];
}

- (id)asNativeObjectWithNSString:(NSString *)jsonString {
  @synchronized(self) {
    return [self asNativeObjectWithOrgJsonJSONObject:new_OrgJsonJSONObject_initWithNSString_(jsonString)];
  }
}

- (id<JavaUtilCollection>)asListWithNSString:(NSString *)jsonArrayString {
  @synchronized(self) {
    OrgJsonJSONArray *jsonArray = new_OrgJsonJSONArray_initWithNSString_(jsonArrayString);
    id<JavaUtilList> l = new_JavaUtilLinkedList_init();
    for (jint i = 0; i < [jsonArray length]; i++) {
      id o = [jsonArray getWithInt:i];
      [self resetNativeObject];
      id t = [self asNativeObjectWithOrgJsonJSONObject:(OrgJsonJSONObject *) cast_chk(o, [OrgJsonJSONObject class])];
      [l addWithId:t];
    }
    [self resetNativeObject];
    return l;
  }
}

- (NSString *)asJsonStringWithId:(id)nativeObject {
  @synchronized(self) {
    return [((OrgJsonJSONObject *) nil_chk([self asJSONObjectWithId:nativeObject])) description];
  }
}

- (OrgJsonJSONArray *)asJSONArrayWithJavaUtilCollection:(id<JavaUtilCollection>)objects {
  @synchronized(self) {
    OrgJsonJSONArray *ja = new_OrgJsonJSONArray_init();
    jint idx = 0;
    if (objects != nil) {
      for (id __strong obj in objects) {
        OrgJsonJSONObject *jo = [self asJSONObjectWithId:obj];
        (void) [ja putWithInt:idx++ withId:jo];
      }
    }
    return ja;
  }
}

- (NSString *)asJsonArrayStringWithJavaUtilCollection:(id<JavaUtilCollection>)objects {
  @synchronized(self) {
    OrgJsonJSONArray *ja = [self asJSONArrayWithJavaUtilCollection:objects];
    return [((OrgJsonJSONArray *) nil_chk(ja)) description];
  }
}

- (id)getValueWithAnAdapter:(id<AnAdapter>)attribAdapter
              withAnAdapter:(id<AnAdapter>)objectAdapter
               withAnAttrib:(id<AnAttrib>)attrb {
  if (attribAdapter != nil) {
    return [attribAdapter convertWithAnAttrib:attrb withId:[((id<AnAttrib>) nil_chk(attrb)) getValue]];
  }
  else if (objectAdapter != nil) {
    return [objectAdapter convertWithAnAttrib:attrb withId:[((id<AnAttrib>) nil_chk(attrb)) getValue]];
  }
  return [((id<AnAttrib>) nil_chk(attrb)) getValue];
}

- (id<AnAdapter>)getJsonSetAdapter {
  return jsonSetAdapter_;
}

- (void)setJsonSetAdapterWithAnAdapter:(id<AnAdapter>)jsonSetAdapter {
  self->jsonSetAdapter_ = jsonSetAdapter;
}

- (id<AnAdapter>)getJsonGetAdapter {
  return jsonGetAdapter_;
}

- (void)setJsonGetAdapterWithAnAdapter:(id<AnAdapter>)jsonGetAdapter {
  self->jsonGetAdapter_ = jsonGetAdapter;
}

@end

void AnObjectImpl_init(AnObjectImpl *self) {
  NSObject_init(self);
  self->attribMap_ = new_JavaUtilLinkedHashMap_init();
  [self initConverters];
}

AnObjectImpl *new_AnObjectImpl_init() {
  J2OBJC_NEW_IMPL(AnObjectImpl, init)
}

AnObjectImpl *create_AnObjectImpl_init() {
  J2OBJC_CREATE_IMPL(AnObjectImpl, init)
}

void AnObjectImpl_initWithIOSClass_withAnObject_(AnObjectImpl *self, IOSClass *anObjClass, id<AnObject> parentAnObject) {
  NSObject_init(self);
  self->attribMap_ = new_JavaUtilLinkedHashMap_init();
  [self init__WithIOSClass:anObjClass withAnObject:parentAnObject];
}

AnObjectImpl *new_AnObjectImpl_initWithIOSClass_withAnObject_(IOSClass *anObjClass, id<AnObject> parentAnObject) {
  J2OBJC_NEW_IMPL(AnObjectImpl, initWithIOSClass_withAnObject_, anObjClass, parentAnObject)
}

AnObjectImpl *create_AnObjectImpl_initWithIOSClass_withAnObject_(IOSClass *anObjClass, id<AnObject> parentAnObject) {
  J2OBJC_CREATE_IMPL(AnObjectImpl, initWithIOSClass_withAnObject_, anObjClass, parentAnObject)
}

void AnObjectImpl_initWithIOSClass_withNSStringArray_withAnObject_(AnObjectImpl *self, IOSClass *anObjClass, IOSObjectArray *propertyNames, id<AnObject> parentAnObject) {
  NSObject_init(self);
  self->attribMap_ = new_JavaUtilLinkedHashMap_init();
  [self init__WithIOSClass:anObjClass withNSStringArray:propertyNames withAnObject:parentAnObject];
}

AnObjectImpl *new_AnObjectImpl_initWithIOSClass_withNSStringArray_withAnObject_(IOSClass *anObjClass, IOSObjectArray *propertyNames, id<AnObject> parentAnObject) {
  J2OBJC_NEW_IMPL(AnObjectImpl, initWithIOSClass_withNSStringArray_withAnObject_, anObjClass, propertyNames, parentAnObject)
}

AnObjectImpl *create_AnObjectImpl_initWithIOSClass_withNSStringArray_withAnObject_(IOSClass *anObjClass, IOSObjectArray *propertyNames, id<AnObject> parentAnObject) {
  J2OBJC_CREATE_IMPL(AnObjectImpl, initWithIOSClass_withNSStringArray_withAnObject_, anObjClass, propertyNames, parentAnObject)
}

void AnObjectImpl_initWithIOSClass_withAnAttribArray_withAnObject_(AnObjectImpl *self, IOSClass *anObjClass, IOSObjectArray *propertyMappers, id<AnObject> parentAnObject) {
  NSObject_init(self);
  self->attribMap_ = new_JavaUtilLinkedHashMap_init();
  [self init__WithIOSClass:anObjClass withAnAttribArray:propertyMappers withAnObject:parentAnObject];
}

AnObjectImpl *new_AnObjectImpl_initWithIOSClass_withAnAttribArray_withAnObject_(IOSClass *anObjClass, IOSObjectArray *propertyMappers, id<AnObject> parentAnObject) {
  J2OBJC_NEW_IMPL(AnObjectImpl, initWithIOSClass_withAnAttribArray_withAnObject_, anObjClass, propertyMappers, parentAnObject)
}

AnObjectImpl *create_AnObjectImpl_initWithIOSClass_withAnAttribArray_withAnObject_(IOSClass *anObjClass, IOSObjectArray *propertyMappers, id<AnObject> parentAnObject) {
  J2OBJC_CREATE_IMPL(AnObjectImpl, initWithIOSClass_withAnAttribArray_withAnObject_, anObjClass, propertyMappers, parentAnObject)
}

void AnObjectImpl_initWithIOSClass_withNSStringArray_(AnObjectImpl *self, IOSClass *anObjClass, IOSObjectArray *propertyNames) {
  NSObject_init(self);
  self->attribMap_ = new_JavaUtilLinkedHashMap_init();
  [self init__WithIOSClass:anObjClass withNSStringArray:propertyNames];
}

AnObjectImpl *new_AnObjectImpl_initWithIOSClass_withNSStringArray_(IOSClass *anObjClass, IOSObjectArray *propertyNames) {
  J2OBJC_NEW_IMPL(AnObjectImpl, initWithIOSClass_withNSStringArray_, anObjClass, propertyNames)
}

AnObjectImpl *create_AnObjectImpl_initWithIOSClass_withNSStringArray_(IOSClass *anObjClass, IOSObjectArray *propertyNames) {
  J2OBJC_CREATE_IMPL(AnObjectImpl, initWithIOSClass_withNSStringArray_, anObjClass, propertyNames)
}

void AnObjectImpl_initWithIOSClass_withAnAttribArray_(AnObjectImpl *self, IOSClass *anObjClass, IOSObjectArray *propertyMappers) {
  NSObject_init(self);
  self->attribMap_ = new_JavaUtilLinkedHashMap_init();
  [self init__WithIOSClass:anObjClass withAnAttribArray:propertyMappers];
}

AnObjectImpl *new_AnObjectImpl_initWithIOSClass_withAnAttribArray_(IOSClass *anObjClass, IOSObjectArray *propertyMappers) {
  J2OBJC_NEW_IMPL(AnObjectImpl, initWithIOSClass_withAnAttribArray_, anObjClass, propertyMappers)
}

AnObjectImpl *create_AnObjectImpl_initWithIOSClass_withAnAttribArray_(IOSClass *anObjClass, IOSObjectArray *propertyMappers) {
  J2OBJC_CREATE_IMPL(AnObjectImpl, initWithIOSClass_withAnAttribArray_, anObjClass, propertyMappers)
}

void AnObjectImpl_clearMaps(AnObjectImpl *self) {
  self->jsonMap_ = nil;
  self->nativeObjectMap_ = nil;
}

jboolean AnObjectImpl_isEmptyWithJavaUtilMap_(AnObjectImpl *self, id<JavaUtilMap> map) {
  return map == nil || [map size] == 0;
}

id<JavaUtilMap> AnObjectImpl_ensureMapWithJavaUtilMap_(AnObjectImpl *self, id<JavaUtilMap> map) {
  if (map == nil) {
    return new_JavaUtilHashMap_init();
  }
  return map;
}

IOSObjectArray *AnObjectImpl_stringsToAttribsWithNSStringArray_(AnObjectImpl *self, IOSObjectArray *attribNames) {
  IOSObjectArray *list = nil;
  if (attribNames != nil) {
    list = [IOSObjectArray newArrayWithLength:attribNames->size_ type:AnAttrib_class_()];
    jint idx = 0;
    {
      IOSObjectArray *a__ = attribNames;
      NSString * const *b__ = a__->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *propertyName = *b__++;
        id<AnAttrib> a = new_AnAttribImpl_initWithNSString_(propertyName);
        (void) IOSObjectArray_Set(list, idx++, a);
      }
    }
  }
  return list;
}

void AnObjectImpl_initAttribsWithAnAttribArray_(AnObjectImpl *self, IOSObjectArray *attribs) {
  {
    IOSObjectArray *a__ = attribs;
    id<AnAttrib> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<AnAttrib> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<AnAttrib> pm = *b__++;
      [self addAttribWithAnAttrib:pm];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AnObjectImpl)

@implementation AnObjectImpl_SampleGetAdapter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AnObjectImpl_SampleGetAdapter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)convertWithAnAttrib:(id<AnAttrib>)attrib
                   withId:(id)value {
  if (value != nil && [value isKindOfClass:[JavaUtilDate class]]) {
    JavaUtilDate *d = (JavaUtilDate *) cast_chk(value, [JavaUtilDate class]);
    return new_JavaLangLong_initWithLong_([d getTime]);
  }
  return value;
}

- (void)onWarningWithIOSClass:(IOSClass *)cluss
                 withNSString:(NSString *)attribName
                       withId:(id)value {
}

@end

void AnObjectImpl_SampleGetAdapter_init(AnObjectImpl_SampleGetAdapter *self) {
  NSObject_init(self);
}

AnObjectImpl_SampleGetAdapter *new_AnObjectImpl_SampleGetAdapter_init() {
  J2OBJC_NEW_IMPL(AnObjectImpl_SampleGetAdapter, init)
}

AnObjectImpl_SampleGetAdapter *create_AnObjectImpl_SampleGetAdapter_init() {
  J2OBJC_CREATE_IMPL(AnObjectImpl_SampleGetAdapter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AnObjectImpl_SampleGetAdapter)

@implementation AnObjectImpl_SampleSetAdapter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AnObjectImpl_SampleSetAdapter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)convertWithAnAttrib:(id<AnAttrib>)attrib
                   withId:(id)value {
  if (value == nil) {
    return nil;
  }
  IOSClass *objClass = [value java_getClass];
  JavaLangReflectMethod *m = [((id<AnAttrib>) nil_chk(attrib)) getSetter];
  if (m == nil) {
    [self onWarningWithIOSClass:objClass withNSString:[attrib getAttribName] withId:value];
    return nil;
  }
  NSString *attribName = [attrib getAttribName];
  IOSObjectArray *paramTypes = [m getParameterTypes];
  IOSClass *p = IOSObjectArray_Get(nil_chk(paramTypes), 0);
  if ([((IOSClass *) nil_chk(p)) isEqual:objClass]) {
    return value;
  }
  IOSObjectArray *cs = [p getConstructors];
  {
    IOSObjectArray *a__ = cs;
    JavaLangReflectConstructor * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaLangReflectConstructor * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangReflectConstructor *c = *b__++;
      IOSObjectArray *cParamTypes = [((JavaLangReflectConstructor *) nil_chk(c)) getParameterTypes];
      if (((IOSObjectArray *) nil_chk(cParamTypes))->size_ != 1) {
        continue;
      }
      @try {
        if ([((IOSClass *) nil_chk(IOSObjectArray_Get(cParamTypes, 0))) isEqual:objClass]) {
          id newObject = [c newInstanceWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ value } count:1 type:NSObject_class_()]];
          return newObject;
        }
        else if ([((NSString *) nil_chk([objClass getSimpleName])) java_equalsIgnoreCase:[((IOSClass *) nil_chk(IOSObjectArray_Get(cParamTypes, 0))) getSimpleName]]) {
          id newObject = [c newInstanceWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ value } count:1 type:NSObject_class_()]];
          return newObject;
        }
        else if ([((IOSClass *) nil_chk(IOSObjectArray_Get(cParamTypes, 0))) isEqual:NSString_class_()]) {
          id newObject = [c newInstanceWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [value description] } count:1 type:NSObject_class_()]];
          return newObject;
        }
      }
      @catch (JavaLangThrowable *t) {
        [self onWarningWithIOSClass:objClass withNSString:attribName withId:value];
      }
    }
  }
  [self onWarningWithIOSClass:objClass withNSString:attribName withId:value];
  return nil;
}

- (void)onWarningWithIOSClass:(IOSClass *)cluss
                 withNSString:(NSString *)attribName
                       withId:(id)value {
}

@end

void AnObjectImpl_SampleSetAdapter_init(AnObjectImpl_SampleSetAdapter *self) {
  NSObject_init(self);
}

AnObjectImpl_SampleSetAdapter *new_AnObjectImpl_SampleSetAdapter_init() {
  J2OBJC_NEW_IMPL(AnObjectImpl_SampleSetAdapter, init)
}

AnObjectImpl_SampleSetAdapter *create_AnObjectImpl_SampleSetAdapter_init() {
  J2OBJC_CREATE_IMPL(AnObjectImpl_SampleSetAdapter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AnObjectImpl_SampleSetAdapter)
