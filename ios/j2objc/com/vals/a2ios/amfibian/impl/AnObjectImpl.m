//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../../../android//com/vals/a2ios/amfibian/impl/AnObjectImpl.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vals/a2ios/amfibian/impl/AnAttribImpl.h"
#include "com/vals/a2ios/amfibian/impl/AnObjectImpl.h"
#include "com/vals/a2ios/amfibian/intf/AnAttrib.h"
#include "com/vals/a2ios/amfibian/intf/AnObject.h"
#include "java/lang/Exception.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/json/JSONArray.h"
#include "org/json/JSONObject.h"

@interface AnObjectImpl () {
 @public
  id<AnObject> parentAnObject_;
  id<JavaUtilMap> nativeObjectMap_;
  id<JavaUtilMap> jsonMap_;
  id nativeObject_;
  id<JavaUtilMap> attribMap_;
}

- (IOSObjectArray *)stringsToAttribsWithNSStringArray:(IOSObjectArray *)propertyNames;

- (void)initAttribsWithAnAttribArray:(IOSObjectArray *)attribMappers OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(AnObjectImpl, parentAnObject_, id<AnObject>)
J2OBJC_FIELD_SETTER(AnObjectImpl, nativeObjectMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(AnObjectImpl, jsonMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(AnObjectImpl, nativeObject_, id)
J2OBJC_FIELD_SETTER(AnObjectImpl, attribMap_, id<JavaUtilMap>)

__attribute__((unused)) static IOSObjectArray *AnObjectImpl_stringsToAttribsWithNSStringArray_(AnObjectImpl *self, IOSObjectArray *propertyNames);

__attribute__((unused)) static void AnObjectImpl_initAttribsWithAnAttribArray_(AnObjectImpl *self, IOSObjectArray *attribMappers);

@implementation AnObjectImpl

- (void)resetNativeObject {
  [self setNativeObjectWithId:[((IOSClass *) nil_chk(nativeClass_)) newInstance]];
}

- (void)setNativeObjectWithId:(id)o {
  self->nativeObject_ = o;
  if (parentAnObject_ != nil) {
    [parentAnObject_ setNativeObjectWithId:o];
  }
}

- (id)getNativeObject {
  return nativeObject_;
}

- (IOSClass *)getNativeClass {
  return nativeClass_;
}

- (id<JavaUtilMap>)getAttribList {
  id<JavaUtilMap> p = new_JavaUtilHashMap_init();
  if (parentAnObject_ != nil) {
    [p putAllWithJavaUtilMap:[parentAnObject_ getAttribList]];
  }
  if (attribMap_ != nil) {
    [p putAllWithJavaUtilMap:attribMap_];
  }
  return p;
}

- (id<AnAttrib>)getAttribWithNSString:(NSString *)propertyName {
  id<AnAttrib> a = [((id<JavaUtilMap>) nil_chk(attribMap_)) getWithId:propertyName];
  if (a == nil && parentAnObject_ != nil) {
    a = [parentAnObject_ getAttribWithNSString:propertyName];
  }
  return a;
}

- (void)setNativeClassWithIOSClass:(IOSClass *)anObjClass {
  self->nativeClass_ = anObjClass;
  IOSClass *superClass = [((IOSClass *) nil_chk(anObjClass)) getSuperclass];
  if (superClass != nil) {
    if (parentAnObject_ != nil) {
      [parentAnObject_ setNativeClassWithIOSClass:superClass];
    }
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AnObjectImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithIOSClass:(IOSClass *)anObjClass
                    withAnObject:(id<AnObject>)parentMapper {
  AnObjectImpl_initWithIOSClass_withAnObject_(self, anObjClass, parentMapper);
  return self;
}

- (void)init__WithIOSClass:(IOSClass *)anObjClass
              withAnObject:(id<AnObject>)parentMapper {
  self->parentAnObject_ = parentMapper;
  [self setNativeClassWithIOSClass:anObjClass];
}

- (instancetype)initWithIOSClass:(IOSClass *)anObjClass
               withAnAttribArray:(IOSObjectArray *)propertyMappers
                    withAnObject:(id<AnObject>)parentMapper {
  AnObjectImpl_initWithIOSClass_withAnAttribArray_withAnObject_(self, anObjClass, propertyMappers, parentMapper);
  return self;
}

- (void)init__WithIOSClass:(IOSClass *)anObjClass
         withAnAttribArray:(IOSObjectArray *)propertyMappers
              withAnObject:(id<AnObject>)parentMapper {
  [self init__WithIOSClass:anObjClass withAnObject:parentMapper];
  AnObjectImpl_initAttribsWithAnAttribArray_(self, propertyMappers);
}

- (instancetype)initWithIOSClass:(IOSClass *)anObjClass
               withAnAttribArray:(IOSObjectArray *)propertyMappers {
  AnObjectImpl_initWithIOSClass_withAnAttribArray_(self, anObjClass, propertyMappers);
  return self;
}

- (void)init__WithIOSClass:(IOSClass *)anObjClass
         withAnAttribArray:(IOSObjectArray *)propertyMappers {
  AnObjectImpl_initAttribsWithAnAttribArray_(self, propertyMappers);
  [self setNativeClassWithIOSClass:anObjClass];
}

- (instancetype)initWithIOSClass:(IOSClass *)anObjClass
               withNSStringArray:(IOSObjectArray *)propertyNames
                    withAnObject:(id<AnObject>)parentMapper {
  AnObjectImpl_initWithIOSClass_withNSStringArray_withAnObject_(self, anObjClass, propertyNames, parentMapper);
  return self;
}

- (void)init__WithIOSClass:(IOSClass *)anObjClass
         withNSStringArray:(IOSObjectArray *)propertyNames
              withAnObject:(id<AnObject>)parentMapper {
  self->parentAnObject_ = parentMapper;
  [self init__WithIOSClass:anObjClass withNSStringArray:propertyNames];
}

- (instancetype)initWithIOSClass:(IOSClass *)anObjClass
               withNSStringArray:(IOSObjectArray *)propertyNames {
  AnObjectImpl_initWithIOSClass_withNSStringArray_(self, anObjClass, propertyNames);
  return self;
}

- (void)init__WithIOSClass:(IOSClass *)anObjClass
         withNSStringArray:(IOSObjectArray *)propertyNames {
  IOSObjectArray *list = AnObjectImpl_stringsToAttribsWithNSStringArray_(self, propertyNames);
  [self init__WithIOSClass:anObjClass withAnAttribArray:list];
}

- (IOSObjectArray *)stringsToAttribsWithNSStringArray:(IOSObjectArray *)propertyNames {
  return AnObjectImpl_stringsToAttribsWithNSStringArray_(self, propertyNames);
}

- (void)initAttribsWithAnAttribArray:(IOSObjectArray *)attribMappers {
  AnObjectImpl_initAttribsWithAnAttribArray_(self, attribMappers);
}

- (void)addAttribWithAnAttrib:(id<AnAttrib>)anAttribMapper {
  [((id<AnAttrib>) nil_chk(anAttribMapper)) setAnObjectWithAnObject:self];
  (void) [((id<JavaUtilMap>) nil_chk(attribMap_)) putWithId:[anAttribMapper getAttribName] withId:anAttribMapper];
}

- (id<JavaUtilMap>)getJsonMap {
  if (jsonMap_ == nil) {
    jsonMap_ = new_JavaUtilHashMap_init();
    id<JavaUtilSet> p = [((id<JavaUtilMap>) nil_chk(attribMap_)) keySet];
    for (NSString * __strong attrName in nil_chk(p)) {
      id<AnAttrib> attr = [attribMap_ getWithId:attrName];
      id value = [((id<AnAttrib>) nil_chk(attr)) getValue];
      if (value != nil) {
        (void) [jsonMap_ putWithId:[attr getJsonOrAttribName] withId:[attr getValue]];
      }
    }
  }
  if (parentAnObject_ != nil) {
    id<JavaUtilMap> parentJsonMap = [parentAnObject_ getJsonMap];
    id<JavaUtilSet> keys = [((id<JavaUtilMap>) nil_chk(parentJsonMap)) keySet];
    for (NSString * __strong k in nil_chk(keys)) {
      (void) [((id<JavaUtilMap>) nil_chk(jsonMap_)) putWithId:k withId:[parentJsonMap getWithId:k]];
    }
  }
  return jsonMap_;
}

- (id<JavaUtilMap>)asMapWithId:(id)nativeObject {
  @synchronized(self) {
    [self setNativeObjectWithId:nativeObject];
    if (nativeObjectMap_ == nil) {
      nativeObjectMap_ = new_JavaUtilHashMap_init();
      id<JavaUtilSet> p = [((id<JavaUtilMap>) nil_chk(attribMap_)) keySet];
      for (NSString * __strong pName in nil_chk(p)) {
        id<AnAttrib> pm = [attribMap_ getWithId:pName];
        id value = [((id<AnAttrib>) nil_chk(pm)) getValue];
        if (value != nil) {
          (void) [nativeObjectMap_ putWithId:pName withId:[pm getValue]];
        }
      }
    }
    if (parentAnObject_ != nil) {
      id<JavaUtilMap> parentMap = [parentAnObject_ asMapWithId:nativeObject];
      id<JavaUtilSet> keys = [((id<JavaUtilMap>) nil_chk(parentMap)) keySet];
      for (NSString * __strong k in nil_chk(keys)) {
        (void) [((id<JavaUtilMap>) nil_chk(nativeObjectMap_)) putWithId:k withId:[parentMap getWithId:k]];
      }
    }
    return nativeObjectMap_;
  }
}

- (OrgJsonJSONObject *)asJSONObjectWithId:(id)nativeObject {
  @synchronized(self) {
    [self setNativeObjectWithId:nativeObject];
    (void) [self asMapWithId:nativeObject];
    return new_OrgJsonJSONObject_initWithJavaUtilMap_([self getJsonMap]);
  }
}

- (id)asNativeObjectWithOrgJsonJSONObject:(OrgJsonJSONObject *)jsonObject {
  @synchronized(self) {
    if (nativeObject_ == nil) {
      [self resetNativeObject];
    }
    if (parentAnObject_ != nil) {
      (void) [parentAnObject_ asNativeObjectWithOrgJsonJSONObject:jsonObject];
    }
    id<JavaUtilSet> attrObjsKeys = [((id<JavaUtilMap>) nil_chk(attribMap_)) keySet];
    for (NSString * __strong attribName in nil_chk(attrObjsKeys)) {
      id<AnAttrib> attr = [attribMap_ getWithId:attribName];
      if (![((OrgJsonJSONObject *) nil_chk(jsonObject)) isNullWithNSString:[((id<AnAttrib>) nil_chk(attr)) getJsonOrAttribName]]) {
        id attrValue = [jsonObject getWithNSString:[attr getJsonOrAttribName]];
        if (attrValue != nil) {
          [attr setValueWithId:attrValue];
        }
      }
    }
    return nativeObject_;
  }
}

- (id)asNativeObjectWithNSString:(NSString *)jsonString {
  @synchronized(self) {
    return [self asNativeObjectWithOrgJsonJSONObject:new_OrgJsonJSONObject_initWithNSString_(jsonString)];
  }
}

- (id<JavaUtilCollection>)asListWithNSString:(NSString *)jsonArrayString {
  @synchronized(self) {
    OrgJsonJSONArray *jsonArray = new_OrgJsonJSONArray_initWithNSString_(jsonArrayString);
    id<JavaUtilList> l = new_JavaUtilLinkedList_init();
    for (jint i = 0; i < [jsonArray length]; i++) {
      id o = [jsonArray getWithInt:i];
      [self resetNativeObject];
      id t = [self asNativeObjectWithOrgJsonJSONObject:(OrgJsonJSONObject *) check_class_cast(o, [OrgJsonJSONObject class])];
      [l addWithId:t];
    }
    [self resetNativeObject];
    return l;
  }
}

- (NSString *)asJsonStringWithId:(id)nativeObject {
  @synchronized(self) {
    return [((OrgJsonJSONObject *) nil_chk([self asJSONObjectWithId:nativeObject])) description];
  }
}

@end

void AnObjectImpl_init(AnObjectImpl *self) {
  (void) NSObject_init(self);
  self->attribMap_ = new_JavaUtilLinkedHashMap_init();
}

AnObjectImpl *new_AnObjectImpl_init() {
  AnObjectImpl *self = [AnObjectImpl alloc];
  AnObjectImpl_init(self);
  return self;
}

void AnObjectImpl_initWithIOSClass_withAnObject_(AnObjectImpl *self, IOSClass *anObjClass, id<AnObject> parentMapper) {
  (void) NSObject_init(self);
  self->attribMap_ = new_JavaUtilLinkedHashMap_init();
  [self init__WithIOSClass:anObjClass withAnObject:parentMapper];
}

AnObjectImpl *new_AnObjectImpl_initWithIOSClass_withAnObject_(IOSClass *anObjClass, id<AnObject> parentMapper) {
  AnObjectImpl *self = [AnObjectImpl alloc];
  AnObjectImpl_initWithIOSClass_withAnObject_(self, anObjClass, parentMapper);
  return self;
}

void AnObjectImpl_initWithIOSClass_withAnAttribArray_withAnObject_(AnObjectImpl *self, IOSClass *anObjClass, IOSObjectArray *propertyMappers, id<AnObject> parentMapper) {
  (void) NSObject_init(self);
  self->attribMap_ = new_JavaUtilLinkedHashMap_init();
  [self init__WithIOSClass:anObjClass withAnAttribArray:propertyMappers withAnObject:parentMapper];
}

AnObjectImpl *new_AnObjectImpl_initWithIOSClass_withAnAttribArray_withAnObject_(IOSClass *anObjClass, IOSObjectArray *propertyMappers, id<AnObject> parentMapper) {
  AnObjectImpl *self = [AnObjectImpl alloc];
  AnObjectImpl_initWithIOSClass_withAnAttribArray_withAnObject_(self, anObjClass, propertyMappers, parentMapper);
  return self;
}

void AnObjectImpl_initWithIOSClass_withAnAttribArray_(AnObjectImpl *self, IOSClass *anObjClass, IOSObjectArray *propertyMappers) {
  (void) NSObject_init(self);
  self->attribMap_ = new_JavaUtilLinkedHashMap_init();
  [self init__WithIOSClass:anObjClass withAnAttribArray:propertyMappers];
}

AnObjectImpl *new_AnObjectImpl_initWithIOSClass_withAnAttribArray_(IOSClass *anObjClass, IOSObjectArray *propertyMappers) {
  AnObjectImpl *self = [AnObjectImpl alloc];
  AnObjectImpl_initWithIOSClass_withAnAttribArray_(self, anObjClass, propertyMappers);
  return self;
}

void AnObjectImpl_initWithIOSClass_withNSStringArray_withAnObject_(AnObjectImpl *self, IOSClass *anObjClass, IOSObjectArray *propertyNames, id<AnObject> parentMapper) {
  (void) NSObject_init(self);
  self->attribMap_ = new_JavaUtilLinkedHashMap_init();
  [self init__WithIOSClass:anObjClass withNSStringArray:propertyNames withAnObject:parentMapper];
}

AnObjectImpl *new_AnObjectImpl_initWithIOSClass_withNSStringArray_withAnObject_(IOSClass *anObjClass, IOSObjectArray *propertyNames, id<AnObject> parentMapper) {
  AnObjectImpl *self = [AnObjectImpl alloc];
  AnObjectImpl_initWithIOSClass_withNSStringArray_withAnObject_(self, anObjClass, propertyNames, parentMapper);
  return self;
}

void AnObjectImpl_initWithIOSClass_withNSStringArray_(AnObjectImpl *self, IOSClass *anObjClass, IOSObjectArray *propertyNames) {
  (void) NSObject_init(self);
  self->attribMap_ = new_JavaUtilLinkedHashMap_init();
  [self init__WithIOSClass:anObjClass withNSStringArray:propertyNames];
}

AnObjectImpl *new_AnObjectImpl_initWithIOSClass_withNSStringArray_(IOSClass *anObjClass, IOSObjectArray *propertyNames) {
  AnObjectImpl *self = [AnObjectImpl alloc];
  AnObjectImpl_initWithIOSClass_withNSStringArray_(self, anObjClass, propertyNames);
  return self;
}

IOSObjectArray *AnObjectImpl_stringsToAttribsWithNSStringArray_(AnObjectImpl *self, IOSObjectArray *propertyNames) {
  IOSObjectArray *list = nil;
  if (propertyNames != nil) {
    list = [IOSObjectArray newArrayWithLength:propertyNames->size_ type:AnAttrib_class_()];
    jint idx = 0;
    {
      IOSObjectArray *a__ = propertyNames;
      NSString * const *b__ = a__->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *propertyName = *b__++;
        id<AnAttrib> a = new_AnAttribImpl_initWithNSString_(propertyName);
        (void) IOSObjectArray_Set(list, idx++, a);
      }
    }
  }
  return list;
}

void AnObjectImpl_initAttribsWithAnAttribArray_(AnObjectImpl *self, IOSObjectArray *attribMappers) {
  {
    IOSObjectArray *a__ = attribMappers;
    id<AnAttrib> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<AnAttrib> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<AnAttrib> pm = *b__++;
      [self addAttribWithAnAttrib:pm];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AnObjectImpl)
