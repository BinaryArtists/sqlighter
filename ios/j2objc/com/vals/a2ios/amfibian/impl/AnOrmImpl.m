//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../../../android//com/vals/a2ios/amfibian/impl/AnOrmImpl.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vals/a2ios/amfibian/impl/AnObjectImpl.h"
#include "com/vals/a2ios/amfibian/impl/AnOrmImpl.h"
#include "com/vals/a2ios/amfibian/impl/AnSqlImpl.h"
#include "com/vals/a2ios/amfibian/intf/AnAttrib.h"
#include "com/vals/a2ios/amfibian/intf/AnObject.h"
#include "com/vals/a2ios/sqlighter/intf/SQLighterDb.h"
#include "com/vals/a2ios/sqlighter/intf/SQLighterRs.h"
#include "java/lang/Exception.h"
#include "java/lang/Long.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "org/json/JSONObject.h"

@interface AnOrmImpl ()

- (void)applyParameters;

@end

__attribute__((unused)) static void AnOrmImpl_applyParameters(AnOrmImpl *self);

@implementation AnOrmImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AnOrmImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithSQLighterDb:(id<SQLighterDb>)sqLighterDb
                       withNSString:(NSString *)tableName
                       withIOSClass:(IOSClass *)anObjClass
                  withAnAttribArray:(IOSObjectArray *)attribList
                       withAnObject:(id<AnObject>)parentAnObject {
  AnOrmImpl_initWithSQLighterDb_withNSString_withIOSClass_withAnAttribArray_withAnObject_(self, sqLighterDb, tableName, anObjClass, attribList, parentAnObject);
  return self;
}

- (instancetype)initWithSQLighterDb:(id<SQLighterDb>)sqLighterDb
                       withNSString:(NSString *)tableName
                       withIOSClass:(IOSClass *)anObjClass
                  withNSStringArray:(IOSObjectArray *)attribColumnList
                       withAnObject:(id<AnObject>)parentAnObject {
  AnOrmImpl_initWithSQLighterDb_withNSString_withIOSClass_withNSStringArray_withAnObject_(self, sqLighterDb, tableName, anObjClass, attribColumnList, parentAnObject);
  return self;
}

- (id<JavaUtilCollection>)getRecords {
  return [self getRecordsWithJavaUtilCollection:nil];
}

- (id<JavaUtilCollection>)getRecordsWithJavaUtilCollection:(id<JavaUtilCollection>)collectionToUse {
  NSString *queryStr = [self getQueryString];
  if (collectionToUse == nil) {
    collectionToUse = new_JavaUtilLinkedList_init();
  }
  AnOrmImpl_applyParameters(self);
  id<SQLighterRs> rs = [((id<SQLighterDb>) nil_chk(sqlighterDb_)) executeSelectWithNSString:queryStr];
  while ([((id<SQLighterRs>) nil_chk(rs)) hasNext]) {
    [self resetNativeObject];
    jint columnIndex = 0;
    for (NSString * __strong attribName in nil_chk([self getAttribNameList])) {
      if (![self isSkipAttrWithNSString:attribName]) {
        id columnValue = [rs getObjectWithInt:columnIndex++];
        if (columnValue != nil) {
          id<AnAttrib> attrib = [self getAttribWithNSString:attribName];
          [self setValueWithAnAttrib_CustomConverter:[self getDbCustomSetConverter] withAnAttrib:attrib withId:columnValue];
        }
      }
    }
    id objectValue = [self getNativeObject];
    id ov = (id) objectValue;
    [((id<JavaUtilCollection>) nil_chk(collectionToUse)) addWithId:ov];
  }
  [rs close];
  return collectionToUse;
}

- (id<JavaUtilCollection>)getJSONObjectRecords {
  return [self getJSONObjectRecordsWithJavaUtilCollection:nil];
}

- (id<JavaUtilCollection>)getJSONObjectRecordsWithJavaUtilCollection:(id<JavaUtilCollection>)collectionToUse {
  id<JavaUtilCollection> rc = [self getRecordsWithJavaUtilCollection:collectionToUse];
  id<JavaUtilCollection> joc = new_JavaUtilLinkedList_init();
  for (id __strong c in nil_chk(rc)) {
    [joc addWithId:[self asJSONObjectWithId:c]];
  }
  return joc;
}

- (id)getSingleResult {
  id<JavaUtilCollection> l = [self getRecordsWithJavaUtilCollection:nil];
  if (l == nil || [l size] != 1) {
    return nil;
  }
  return [((id<JavaUtilIterator>) nil_chk([((id<JavaUtilCollection>) nil_chk(l)) iterator])) next];
}

- (id)getFirstResultOrNull {
  id<JavaUtilCollection> l = [self getRecordsWithJavaUtilCollection:nil];
  if (l == nil || [l size] == 0) {
    return nil;
  }
  id<JavaUtilIterator> i = [((id<JavaUtilCollection>) nil_chk(l)) iterator];
  return [((id<JavaUtilIterator>) nil_chk(i)) next];
}

- (void)applyParameters {
  AnOrmImpl_applyParameters(self);
}

- (JavaLangLong *)apply {
  if ([self getType] == AnSqlImpl_TYPE_INSERT || [self getType] == AnSqlImpl_TYPE_UPDATE || [self getType] == AnSqlImpl_TYPE_DELETE) {
    NSString *q = [self getQueryString];
    AnOrmImpl_applyParameters(self);
    JavaLangLong *updateInfo = [((id<SQLighterDb>) nil_chk(sqlighterDb_)) executeChangeWithNSString:q];
    return updateInfo;
  }
  else if ([self getType] == AnSqlImpl_TYPE_CREATE) {
    NSString *q = [self getQueryString];
    JavaLangLong *updateInfo = [((id<SQLighterDb>) nil_chk(sqlighterDb_)) executeChangeWithNSString:q];
    return updateInfo;
  }
  return nil;
}

- (void)setSqlighterDbWithSQLighterDb:(id<SQLighterDb>)sqlighterDb {
  self->sqlighterDb_ = sqlighterDb;
}

- (id<SQLighterDb>)getSqlighterDb {
  return sqlighterDb_;
}

@end

void AnOrmImpl_init(AnOrmImpl *self) {
  (void) AnSqlImpl_init(self);
}

AnOrmImpl *new_AnOrmImpl_init() {
  AnOrmImpl *self = [AnOrmImpl alloc];
  AnOrmImpl_init(self);
  return self;
}

void AnOrmImpl_initWithSQLighterDb_withNSString_withIOSClass_withAnAttribArray_withAnObject_(AnOrmImpl *self, id<SQLighterDb> sqLighterDb, NSString *tableName, IOSClass *anObjClass, IOSObjectArray *attribList, id<AnObject> parentAnObject) {
  (void) AnSqlImpl_initWithNSString_withIOSClass_withAnAttribArray_withAnObject_(self, tableName, anObjClass, attribList, parentAnObject);
  self->sqlighterDb_ = sqLighterDb;
}

AnOrmImpl *new_AnOrmImpl_initWithSQLighterDb_withNSString_withIOSClass_withAnAttribArray_withAnObject_(id<SQLighterDb> sqLighterDb, NSString *tableName, IOSClass *anObjClass, IOSObjectArray *attribList, id<AnObject> parentAnObject) {
  AnOrmImpl *self = [AnOrmImpl alloc];
  AnOrmImpl_initWithSQLighterDb_withNSString_withIOSClass_withAnAttribArray_withAnObject_(self, sqLighterDb, tableName, anObjClass, attribList, parentAnObject);
  return self;
}

void AnOrmImpl_initWithSQLighterDb_withNSString_withIOSClass_withNSStringArray_withAnObject_(AnOrmImpl *self, id<SQLighterDb> sqLighterDb, NSString *tableName, IOSClass *anObjClass, IOSObjectArray *attribColumnList, id<AnObject> parentAnObject) {
  (void) AnSqlImpl_initWithNSString_withIOSClass_withNSStringArray_withAnObject_(self, tableName, anObjClass, attribColumnList, parentAnObject);
  self->sqlighterDb_ = sqLighterDb;
}

AnOrmImpl *new_AnOrmImpl_initWithSQLighterDb_withNSString_withIOSClass_withNSStringArray_withAnObject_(id<SQLighterDb> sqLighterDb, NSString *tableName, IOSClass *anObjClass, IOSObjectArray *attribColumnList, id<AnObject> parentAnObject) {
  AnOrmImpl *self = [AnOrmImpl alloc];
  AnOrmImpl_initWithSQLighterDb_withNSString_withIOSClass_withNSStringArray_withAnObject_(self, sqLighterDb, tableName, anObjClass, attribColumnList, parentAnObject);
  return self;
}

void AnOrmImpl_applyParameters(AnOrmImpl *self) {
  id<JavaUtilList> parameters = [self getParameters];
  for (id __strong par in nil_chk(parameters)) {
    [((id<SQLighterDb>) nil_chk(self->sqlighterDb_)) addParamObjWithId:par];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AnOrmImpl)
