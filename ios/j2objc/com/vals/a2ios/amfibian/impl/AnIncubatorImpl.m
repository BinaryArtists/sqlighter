//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../../../android//com/vals/a2ios/amfibian/impl/AnIncubatorImpl.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vals/a2ios/amfibian/impl/AnAttribImpl.h"
#include "com/vals/a2ios/amfibian/impl/AnIncubatorImpl.h"
#include "com/vals/a2ios/amfibian/impl/AnOrmImpl.h"
#include "com/vals/a2ios/amfibian/intf/AnAttrib.h"
#include "com/vals/a2ios/amfibian/intf/AnOrm.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "org/json/JSONArray.h"
#include "org/json/JSONException.h"
#include "org/json/JSONObject.h"

@class AnIncubatorImpl_AnObjectRecord;

#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface AnIncubatorImpl () {
 @public
  id<JavaUtilMap> entityRecordMap_;
}

- (id<AnOrm>)makeWithNSString:(NSString *)name
              withJavaUtilMap:(id<JavaUtilMap>)records;

- (id<JavaUtilMap>)loadObjectsWithOrgJsonJSONArray:(OrgJsonJSONArray *)jsonArray;

- (AnIncubatorImpl_AnObjectRecord *)loadAnObjectRecordWithOrgJsonJSONObject:(OrgJsonJSONObject *)jo;

- (NSString *)ensurePropertyWithNSString:(NSString *)name
                   withOrgJsonJSONObject:(OrgJsonJSONObject *)jo
                         withJavaUtilMap:(id<JavaUtilMap>)propertiesMap;

- (id<JavaUtilCollection>)ensureAttributesWithOrgJsonJSONObject:(OrgJsonJSONObject *)jo;

- (NSString *)removeCommentsWithNSString:(NSString *)string
                            withNSString:(NSString *)begComm
                            withNSString:(NSString *)endComm;

@end

J2OBJC_FIELD_SETTER(AnIncubatorImpl, entityRecordMap_, id<JavaUtilMap>)

static NSString *AnIncubatorImpl_VERSION_ = @"version";
J2OBJC_STATIC_FIELD_GETTER(AnIncubatorImpl, VERSION_, NSString *)

static NSString *AnIncubatorImpl_NAME_ = @"name";
J2OBJC_STATIC_FIELD_GETTER(AnIncubatorImpl, NAME_, NSString *)

static NSString *AnIncubatorImpl_OBJECTS_ = @"objects";
J2OBJC_STATIC_FIELD_GETTER(AnIncubatorImpl, OBJECTS_, NSString *)

static NSString *AnIncubatorImpl_CLASS_NAME_ = @"className";
J2OBJC_STATIC_FIELD_GETTER(AnIncubatorImpl, CLASS_NAME_, NSString *)

static NSString *AnIncubatorImpl_TABLE_NAME_ = @"tableName";
J2OBJC_STATIC_FIELD_GETTER(AnIncubatorImpl, TABLE_NAME_, NSString *)

static NSString *AnIncubatorImpl_ATTRIBUTES_ = @"attributes";
J2OBJC_STATIC_FIELD_GETTER(AnIncubatorImpl, ATTRIBUTES_, NSString *)

static NSString *AnIncubatorImpl_ATTRIB_NAME_ = @"attribName";
J2OBJC_STATIC_FIELD_GETTER(AnIncubatorImpl, ATTRIB_NAME_, NSString *)

static NSString *AnIncubatorImpl_COLUMN_NAME_ = @"columnName";
J2OBJC_STATIC_FIELD_GETTER(AnIncubatorImpl, COLUMN_NAME_, NSString *)

static NSString *AnIncubatorImpl_JSON_NAME_ = @"jsonName";
J2OBJC_STATIC_FIELD_GETTER(AnIncubatorImpl, JSON_NAME_, NSString *)

static NSString *AnIncubatorImpl_DB_COLUMN_DEFINITION_ = @"dbColumnDefinition";
J2OBJC_STATIC_FIELD_GETTER(AnIncubatorImpl, DB_COLUMN_DEFINITION_, NSString *)

static NSString *AnIncubatorImpl_DEPENDS_ = @"extends";
J2OBJC_STATIC_FIELD_GETTER(AnIncubatorImpl, DEPENDS_, NSString *)

static NSString *AnIncubatorImpl_JSON_SET_CONVERTER_ = @"jsonSetConverter";
J2OBJC_STATIC_FIELD_GETTER(AnIncubatorImpl, JSON_SET_CONVERTER_, NSString *)

static NSString *AnIncubatorImpl_JSON_GET_CONVERTER_ = @"jsonGetConverter";
J2OBJC_STATIC_FIELD_GETTER(AnIncubatorImpl, JSON_GET_CONVERTER_, NSString *)

static NSString *AnIncubatorImpl_DB_SET_CONVERTER_ = @"dbSetConverter";
J2OBJC_STATIC_FIELD_GETTER(AnIncubatorImpl, DB_SET_CONVERTER_, NSString *)

static NSString *AnIncubatorImpl_DB_GET_CONVERTER_ = @"dbGetConverter";
J2OBJC_STATIC_FIELD_GETTER(AnIncubatorImpl, DB_GET_CONVERTER_, NSString *)

__attribute__((unused)) static id<AnOrm> AnIncubatorImpl_makeWithNSString_withJavaUtilMap_(AnIncubatorImpl *self, NSString *name, id<JavaUtilMap> records);

__attribute__((unused)) static id<JavaUtilMap> AnIncubatorImpl_loadObjectsWithOrgJsonJSONArray_(AnIncubatorImpl *self, OrgJsonJSONArray *jsonArray);

__attribute__((unused)) static AnIncubatorImpl_AnObjectRecord *AnIncubatorImpl_loadAnObjectRecordWithOrgJsonJSONObject_(AnIncubatorImpl *self, OrgJsonJSONObject *jo);

__attribute__((unused)) static NSString *AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withJavaUtilMap_(AnIncubatorImpl *self, NSString *name, OrgJsonJSONObject *jo, id<JavaUtilMap> propertiesMap);

__attribute__((unused)) static id<JavaUtilCollection> AnIncubatorImpl_ensureAttributesWithOrgJsonJSONObject_(AnIncubatorImpl *self, OrgJsonJSONObject *jo);

__attribute__((unused)) static NSString *AnIncubatorImpl_removeCommentsWithNSString_withNSString_withNSString_(AnIncubatorImpl *self, NSString *string, NSString *begComm, NSString *endComm);

@interface AnIncubatorImpl_AnJsonSchema : NSObject {
 @public
  NSString *name_;
  NSString *version__;
  IOSClass *entityClass_;
  id<JavaUtilMap> directPropertiesMap_;
}

- (instancetype)initWithAnIncubatorImpl:(AnIncubatorImpl *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(AnIncubatorImpl_AnJsonSchema)

J2OBJC_FIELD_SETTER(AnIncubatorImpl_AnJsonSchema, name_, NSString *)
J2OBJC_FIELD_SETTER(AnIncubatorImpl_AnJsonSchema, version__, NSString *)
J2OBJC_FIELD_SETTER(AnIncubatorImpl_AnJsonSchema, entityClass_, IOSClass *)
J2OBJC_FIELD_SETTER(AnIncubatorImpl_AnJsonSchema, directPropertiesMap_, id<JavaUtilMap>)

__attribute__((unused)) static void AnIncubatorImpl_AnJsonSchema_initWithAnIncubatorImpl_(AnIncubatorImpl_AnJsonSchema *self, AnIncubatorImpl *outer$);

__attribute__((unused)) static AnIncubatorImpl_AnJsonSchema *new_AnIncubatorImpl_AnJsonSchema_initWithAnIncubatorImpl_(AnIncubatorImpl *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(AnIncubatorImpl_AnJsonSchema)

@interface AnIncubatorImpl_AnObjectRecord : NSObject {
 @public
  id<JavaUtilMap> directPropertiesMap_;
  id<JavaUtilCollection> propertiesMap_;
  id<JavaUtilCollection> extraProperties_;
  AnIncubatorImpl_AnObjectRecord *parent_;
}

- (instancetype)initWithAnIncubatorImpl:(AnIncubatorImpl *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(AnIncubatorImpl_AnObjectRecord)

J2OBJC_FIELD_SETTER(AnIncubatorImpl_AnObjectRecord, directPropertiesMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(AnIncubatorImpl_AnObjectRecord, propertiesMap_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(AnIncubatorImpl_AnObjectRecord, extraProperties_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(AnIncubatorImpl_AnObjectRecord, parent_, AnIncubatorImpl_AnObjectRecord *)

__attribute__((unused)) static void AnIncubatorImpl_AnObjectRecord_initWithAnIncubatorImpl_(AnIncubatorImpl_AnObjectRecord *self, AnIncubatorImpl *outer$);

__attribute__((unused)) static AnIncubatorImpl_AnObjectRecord *new_AnIncubatorImpl_AnObjectRecord_initWithAnIncubatorImpl_(AnIncubatorImpl *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(AnIncubatorImpl_AnObjectRecord)

@implementation AnIncubatorImpl

- (void)load__WithNSString:(NSString *)jsonString {
  jsonString = AnIncubatorImpl_removeCommentsWithNSString_withNSString_withNSString_(self, jsonString, @"/*", @"*/");
  OrgJsonJSONObject *jo = new_OrgJsonJSONObject_initWithNSString_(jsonString);
  AnIncubatorImpl_AnJsonSchema *anSchema = new_AnIncubatorImpl_AnJsonSchema_initWithAnIncubatorImpl_(self);
  anSchema->name_ = AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withJavaUtilMap_(self, AnIncubatorImpl_NAME_, jo, nil);
  anSchema->version__ = AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withJavaUtilMap_(self, AnIncubatorImpl_VERSION_, jo, nil);
  if ([jo hasWithNSString:AnIncubatorImpl_OBJECTS_]) {
    OrgJsonJSONArray *ja = [jo getJSONArrayWithNSString:AnIncubatorImpl_OBJECTS_];
    entityRecordMap_ = AnIncubatorImpl_loadObjectsWithOrgJsonJSONArray_(self, ja);
  }
}

- (id<AnOrm>)makeWithNSString:(NSString *)name {
  return AnIncubatorImpl_makeWithNSString_withJavaUtilMap_(self, name, entityRecordMap_);
}

- (id<AnOrm>)makeWithIOSClass:(IOSClass *)cluss {
  return AnIncubatorImpl_makeWithNSString_withJavaUtilMap_(self, [((IOSClass *) nil_chk(cluss)) getName], entityRecordMap_);
}

- (id<AnOrm>)makeWithNSString:(NSString *)name
              withJavaUtilMap:(id<JavaUtilMap>)records {
  return AnIncubatorImpl_makeWithNSString_withJavaUtilMap_(self, name, records);
}

- (id<JavaUtilMap>)loadObjectsWithOrgJsonJSONArray:(OrgJsonJSONArray *)jsonArray {
  return AnIncubatorImpl_loadObjectsWithOrgJsonJSONArray_(self, jsonArray);
}

- (AnIncubatorImpl_AnObjectRecord *)loadAnObjectRecordWithOrgJsonJSONObject:(OrgJsonJSONObject *)jo {
  return AnIncubatorImpl_loadAnObjectRecordWithOrgJsonJSONObject_(self, jo);
}

- (NSString *)ensurePropertyWithNSString:(NSString *)name
                   withOrgJsonJSONObject:(OrgJsonJSONObject *)jo
                         withJavaUtilMap:(id<JavaUtilMap>)propertiesMap {
  return AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withJavaUtilMap_(self, name, jo, propertiesMap);
}

- (id<JavaUtilCollection>)ensureAttributesWithOrgJsonJSONObject:(OrgJsonJSONObject *)jo {
  return AnIncubatorImpl_ensureAttributesWithOrgJsonJSONObject_(self, jo);
}

- (NSString *)removeCommentsWithNSString:(NSString *)string
                            withNSString:(NSString *)begComm
                            withNSString:(NSString *)endComm {
  return AnIncubatorImpl_removeCommentsWithNSString_withNSString_withNSString_(self, string, begComm, endComm);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AnIncubatorImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

@end

id<AnOrm> AnIncubatorImpl_makeWithNSString_withJavaUtilMap_(AnIncubatorImpl *self, NSString *name, id<JavaUtilMap> records) {
  AnIncubatorImpl_AnObjectRecord *anObjRec = [((id<JavaUtilMap>) nil_chk(records)) getWithId:name];
  NSString *deps = [((id<JavaUtilMap>) nil_chk(((AnIncubatorImpl_AnObjectRecord *) nil_chk(anObjRec))->directPropertiesMap_)) getWithId:AnIncubatorImpl_DEPENDS_];
  anObjRec->parent_ = [records getWithId:deps];
  id<AnOrm> anOrm = new_AnOrmImpl_init();
  if (anObjRec->parent_ != nil) {
    id<AnOrm> dependsOn = AnIncubatorImpl_makeWithNSString_withJavaUtilMap_(self, [anObjRec->parent_->directPropertiesMap_ getWithId:AnIncubatorImpl_CLASS_NAME_], records);
    [anOrm setParentAnObjectWithAnObject:dependsOn];
  }
  [anOrm setNativeClassWithIOSClass:[self getClassByNameWithNSString:[anObjRec->directPropertiesMap_ getWithId:AnIncubatorImpl_CLASS_NAME_]]];
  NSString *assignedTableName = [anObjRec->directPropertiesMap_ getWithId:AnIncubatorImpl_TABLE_NAME_];
  if (assignedTableName == nil) {
    [anOrm setTableNameWithNSString:[((IOSClass *) nil_chk([anOrm getNativeClass])) getSimpleName]];
  }
  else {
    [anOrm setTableNameWithNSString:assignedTableName];
  }
  id<JavaUtilCollection> mipColl = new_JavaUtilArrayList_init();
  for (id<JavaUtilMap> __strong m in nil_chk(anObjRec->propertiesMap_)) {
    NSString *propertyName = [((id<JavaUtilMap>) nil_chk(m)) getWithId:AnIncubatorImpl_ATTRIB_NAME_];
    NSString *columnName = nil;
    NSString *jsonName = nil;
    if ([((NSString *) nil_chk(propertyName)) indexOf:','] != -1) {
      IOSObjectArray *attrNames = [propertyName split:@","];
      propertyName = IOSObjectArray_Get(nil_chk(attrNames), 0);
      columnName = IOSObjectArray_Get(attrNames, 1);
      if (attrNames->size_ > 2) {
        jsonName = IOSObjectArray_Get(attrNames, 2);
      }
    }
    else {
      columnName = [m getWithId:AnIncubatorImpl_COLUMN_NAME_];
      jsonName = [m getWithId:AnIncubatorImpl_JSON_NAME_];
    }
    if (columnName == nil || [@"" isEqual:[columnName trim]]) {
      columnName = propertyName;
    }
    if (jsonName == nil || [@"" isEqual:[jsonName trim]]) {
      jsonName = propertyName;
    }
    NSString *columnDef = [m getWithId:AnIncubatorImpl_DB_COLUMN_DEFINITION_];
    id<AnAttrib> anAttrib = new_AnAttribImpl_initWithNSString_withNSString_withNSString_(propertyName, columnName, jsonName);
    [anAttrib setDbColumnDefinitionWithNSString:columnDef];
    [mipColl addWithId:anAttrib];
  }
  [anOrm setOwnAttribsWithAnAttribArray:[mipColl toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[mipColl size] type:AnAttrib_class_()]]];
  id<JavaUtilCollection> xpColl = new_JavaUtilArrayList_init();
  if (anObjRec->extraProperties_ != nil) {
    for (NSString * __strong s in anObjRec->extraProperties_) {
      [xpColl addWithId:s];
    }
  }
  return anOrm;
}

id<JavaUtilMap> AnIncubatorImpl_loadObjectsWithOrgJsonJSONArray_(AnIncubatorImpl *self, OrgJsonJSONArray *jsonArray) {
  id<JavaUtilMap> mil = new_JavaUtilHashMap_init();
  jint itemCount = [((OrgJsonJSONArray *) nil_chk(jsonArray)) length];
  for (jint i = 0; i < itemCount; i++) {
    OrgJsonJSONObject *jo = [jsonArray getJSONObjectWithInt:i];
    AnIncubatorImpl_AnObjectRecord *mi = AnIncubatorImpl_loadAnObjectRecordWithOrgJsonJSONObject_(self, jo);
    (void) [mil putWithId:[((id<JavaUtilMap>) nil_chk(((AnIncubatorImpl_AnObjectRecord *) nil_chk(mi))->directPropertiesMap_)) getWithId:AnIncubatorImpl_CLASS_NAME_] withId:mi];
  }
  return mil;
}

AnIncubatorImpl_AnObjectRecord *AnIncubatorImpl_loadAnObjectRecordWithOrgJsonJSONObject_(AnIncubatorImpl *self, OrgJsonJSONObject *jo) {
  AnIncubatorImpl_AnObjectRecord *rec = new_AnIncubatorImpl_AnObjectRecord_initWithAnIncubatorImpl_(self);
  rec->directPropertiesMap_ = new_JavaUtilHashMap_init();
  (void) AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withJavaUtilMap_(self, AnIncubatorImpl_CLASS_NAME_, jo, rec->directPropertiesMap_);
  (void) AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withJavaUtilMap_(self, AnIncubatorImpl_TABLE_NAME_, jo, rec->directPropertiesMap_);
  (void) AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withJavaUtilMap_(self, AnIncubatorImpl_DEPENDS_, jo, rec->directPropertiesMap_);
  rec->propertiesMap_ = AnIncubatorImpl_ensureAttributesWithOrgJsonJSONObject_(self, jo);
  return rec;
}

NSString *AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withJavaUtilMap_(AnIncubatorImpl *self, NSString *name, OrgJsonJSONObject *jo, id<JavaUtilMap> propertiesMap) {
  if ([((OrgJsonJSONObject *) nil_chk(jo)) hasWithNSString:name]) {
    NSString *value = [jo getStringWithNSString:name];
    if (propertiesMap != nil) {
      (void) [propertiesMap putWithId:name withId:value];
    }
    return value;
  }
  return nil;
}

id<JavaUtilCollection> AnIncubatorImpl_ensureAttributesWithOrgJsonJSONObject_(AnIncubatorImpl *self, OrgJsonJSONObject *jo) {
  if ([((OrgJsonJSONObject *) nil_chk(jo)) hasWithNSString:AnIncubatorImpl_ATTRIBUTES_]) {
    id<JavaUtilCollection> propColl = new_JavaUtilArrayList_init();
    OrgJsonJSONArray *detailsArray = [jo getJSONArrayWithNSString:AnIncubatorImpl_ATTRIBUTES_];
    for (jint i = 0; i < [((OrgJsonJSONArray *) nil_chk(detailsArray)) length]; i++) {
      OrgJsonJSONObject *propertyObject = [detailsArray getJSONObjectWithInt:i];
      id<JavaUtilMap> map = new_JavaUtilHashMap_init();
      (void) AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withJavaUtilMap_(self, AnIncubatorImpl_ATTRIB_NAME_, propertyObject, map);
      (void) AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withJavaUtilMap_(self, AnIncubatorImpl_COLUMN_NAME_, propertyObject, map);
      (void) AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withJavaUtilMap_(self, AnIncubatorImpl_JSON_NAME_, propertyObject, map);
      (void) AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withJavaUtilMap_(self, AnIncubatorImpl_DB_COLUMN_DEFINITION_, propertyObject, map);
      [propColl addWithId:map];
    }
    return propColl;
  }
  return nil;
}

NSString *AnIncubatorImpl_removeCommentsWithNSString_withNSString_withNSString_(AnIncubatorImpl *self, NSString *string, NSString *begComm, NSString *endComm) {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(string);
  jint cb = -1, ce = -1;
  jint endCommLength = ((jint) [((NSString *) nil_chk(endComm)) length]);
  do {
    cb = [sb indexOfWithNSString:begComm];
    ce = [sb indexOfWithNSString:endComm];
    if (cb == -1 && ce == -1) {
      break;
    }
    else if (cb == -1 || ce == -1) {
      return nil;
    }
    else {
      (void) [sb delete__WithInt:cb withInt:ce + endCommLength];
    }
  }
  while (true);
  return [sb description];
}

void AnIncubatorImpl_init(AnIncubatorImpl *self) {
  (void) NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AnIncubatorImpl)

@implementation AnIncubatorImpl_AnJsonSchema

- (instancetype)initWithAnIncubatorImpl:(AnIncubatorImpl *)outer$ {
  AnIncubatorImpl_AnJsonSchema_initWithAnIncubatorImpl_(self, outer$);
  return self;
}

@end

void AnIncubatorImpl_AnJsonSchema_initWithAnIncubatorImpl_(AnIncubatorImpl_AnJsonSchema *self, AnIncubatorImpl *outer$) {
  (void) NSObject_init(self);
}

AnIncubatorImpl_AnJsonSchema *new_AnIncubatorImpl_AnJsonSchema_initWithAnIncubatorImpl_(AnIncubatorImpl *outer$) {
  AnIncubatorImpl_AnJsonSchema *self = [AnIncubatorImpl_AnJsonSchema alloc];
  AnIncubatorImpl_AnJsonSchema_initWithAnIncubatorImpl_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AnIncubatorImpl_AnJsonSchema)

@implementation AnIncubatorImpl_AnObjectRecord

- (instancetype)initWithAnIncubatorImpl:(AnIncubatorImpl *)outer$ {
  AnIncubatorImpl_AnObjectRecord_initWithAnIncubatorImpl_(self, outer$);
  return self;
}

@end

void AnIncubatorImpl_AnObjectRecord_initWithAnIncubatorImpl_(AnIncubatorImpl_AnObjectRecord *self, AnIncubatorImpl *outer$) {
  (void) NSObject_init(self);
}

AnIncubatorImpl_AnObjectRecord *new_AnIncubatorImpl_AnObjectRecord_initWithAnIncubatorImpl_(AnIncubatorImpl *outer$) {
  AnIncubatorImpl_AnObjectRecord *self = [AnIncubatorImpl_AnObjectRecord alloc];
  AnIncubatorImpl_AnObjectRecord_initWithAnIncubatorImpl_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AnIncubatorImpl_AnObjectRecord)
