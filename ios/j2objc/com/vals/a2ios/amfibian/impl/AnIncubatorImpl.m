//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../../../android//com/vals/a2ios/amfibian/impl/AnIncubatorImpl.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vals/a2ios/amfibian/impl/AnAttribImpl.h"
#include "com/vals/a2ios/amfibian/impl/AnIncubatorImpl.h"
#include "com/vals/a2ios/amfibian/impl/AnOrmImpl.h"
#include "com/vals/a2ios/amfibian/intf/AnAdapter.h"
#include "com/vals/a2ios/amfibian/intf/AnAttrib.h"
#include "com/vals/a2ios/amfibian/intf/AnOrm.h"
#include "com/vals/a2ios/sqlighter/intf/SQLighterDb.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "org/json/JSONArray.h"
#include "org/json/JSONObject.h"

@class AnIncubatorImpl_AnAssociateRecord;
@class AnIncubatorImpl_AnJsonSchema;
@class AnIncubatorImpl_AnObjectRecord;
@class AnIncubatorImpl_ErrorContext;

@interface AnIncubatorImpl () {
 @public
  jboolean isLoaded_;
  id<SQLighterDb> sqLighterDb_;
  AnIncubatorImpl_ErrorContext *eCtx_;
  AnIncubatorImpl_AnJsonSchema *anSchema_;
}

@end

J2OBJC_FIELD_SETTER(AnIncubatorImpl, sqLighterDb_, id<SQLighterDb>)
J2OBJC_FIELD_SETTER(AnIncubatorImpl, eCtx_, AnIncubatorImpl_ErrorContext *)
J2OBJC_FIELD_SETTER(AnIncubatorImpl, anSchema_, AnIncubatorImpl_AnJsonSchema *)

inline NSString *AnIncubatorImpl_get_VERSION();
static NSString *AnIncubatorImpl_VERSION = @"version";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AnIncubatorImpl, VERSION, NSString *)

inline NSString *AnIncubatorImpl_get_NAME();
static NSString *AnIncubatorImpl_NAME = @"name";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AnIncubatorImpl, NAME, NSString *)

inline NSString *AnIncubatorImpl_get_OBJECTS();
static NSString *AnIncubatorImpl_OBJECTS = @"objects";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AnIncubatorImpl, OBJECTS, NSString *)

inline NSString *AnIncubatorImpl_get_CLASS_NAME();
static NSString *AnIncubatorImpl_CLASS_NAME = @"className";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AnIncubatorImpl, CLASS_NAME, NSString *)

inline NSString *AnIncubatorImpl_get_TABLE_NAME();
static NSString *AnIncubatorImpl_TABLE_NAME = @"tableName";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AnIncubatorImpl, TABLE_NAME, NSString *)

inline NSString *AnIncubatorImpl_get_ATTRIBUTES();
static NSString *AnIncubatorImpl_ATTRIBUTES = @"attributes";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AnIncubatorImpl, ATTRIBUTES, NSString *)

inline NSString *AnIncubatorImpl_get_ATTRIB_NAME();
static NSString *AnIncubatorImpl_ATTRIB_NAME = @"attribName";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AnIncubatorImpl, ATTRIB_NAME, NSString *)

inline NSString *AnIncubatorImpl_get_COLUMN_NAME();
static NSString *AnIncubatorImpl_COLUMN_NAME = @"columnName";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AnIncubatorImpl, COLUMN_NAME, NSString *)

inline NSString *AnIncubatorImpl_get_JSON_NAME();
static NSString *AnIncubatorImpl_JSON_NAME = @"jsonName";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AnIncubatorImpl, JSON_NAME, NSString *)

inline NSString *AnIncubatorImpl_get_DB_COLUMN_DEFINITION();
static NSString *AnIncubatorImpl_DB_COLUMN_DEFINITION = @"dbColumnDefinition";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AnIncubatorImpl, DB_COLUMN_DEFINITION, NSString *)

inline NSString *AnIncubatorImpl_get_EXTENDS();
static NSString *AnIncubatorImpl_EXTENDS = @"extends";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AnIncubatorImpl, EXTENDS, NSString *)

inline NSString *AnIncubatorImpl_get_JSON_SET_ADAPTER();
static NSString *AnIncubatorImpl_JSON_SET_ADAPTER = @"jsonSet";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AnIncubatorImpl, JSON_SET_ADAPTER, NSString *)

inline NSString *AnIncubatorImpl_get_JSON_GET_ADAPTER();
static NSString *AnIncubatorImpl_JSON_GET_ADAPTER = @"jsonGet";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AnIncubatorImpl, JSON_GET_ADAPTER, NSString *)

inline NSString *AnIncubatorImpl_get_DB_SET_ADAPTER();
static NSString *AnIncubatorImpl_DB_SET_ADAPTER = @"dbSet";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AnIncubatorImpl, DB_SET_ADAPTER, NSString *)

inline NSString *AnIncubatorImpl_get_DB_GET_ADAPTER();
static NSString *AnIncubatorImpl_DB_GET_ADAPTER = @"dbGet";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AnIncubatorImpl, DB_GET_ADAPTER, NSString *)

inline NSString *AnIncubatorImpl_get_NULL_STRING();
static NSString *AnIncubatorImpl_NULL_STRING = @"null";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AnIncubatorImpl, NULL_STRING, NSString *)

__attribute__((unused)) static NSString *AnIncubatorImpl_getContext(AnIncubatorImpl *self);

__attribute__((unused)) static void AnIncubatorImpl_loadSchemaAdaptersWithOrgJsonJSONObject_(AnIncubatorImpl *self, OrgJsonJSONObject *jo);

__attribute__((unused)) static id<JavaUtilMap> AnIncubatorImpl_loadObjectsWithOrgJsonJSONArray_(AnIncubatorImpl *self, OrgJsonJSONArray *jsonArray);

__attribute__((unused)) static AnIncubatorImpl_AnObjectRecord *AnIncubatorImpl_loadAnObjectRecordWithOrgJsonJSONObject_(AnIncubatorImpl *self, OrgJsonJSONObject *jo);

__attribute__((unused)) static NSString *AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withBoolean_(AnIncubatorImpl *self, NSString *name, OrgJsonJSONObject *jo, jboolean required);

__attribute__((unused)) static void AnIncubatorImpl_ensureAttributesWithAnOrm_withOrgJsonJSONObject_withAnIncubatorImpl_AnObjectRecord_(AnIncubatorImpl *self, id<AnOrm> orm, OrgJsonJSONObject *jo, AnIncubatorImpl_AnObjectRecord *rec);

__attribute__((unused)) static void AnIncubatorImpl_ensureAssociationsWithOrgJsonJSONObject_withAnIncubatorImpl_AnObjectRecord_(AnIncubatorImpl *self, OrgJsonJSONObject *jo, AnIncubatorImpl_AnObjectRecord *rec);

__attribute__((unused)) static void AnIncubatorImpl_ensureAnObjectAdaptersWithAnOrm_withOrgJsonJSONObject_(AnIncubatorImpl *self, id<AnOrm> orm, OrgJsonJSONObject *jo);

__attribute__((unused)) static IOSClass *AnIncubatorImpl_getAdapterClassWithNSString_(AnIncubatorImpl *self, NSString *adapterName);

__attribute__((unused)) static id<AnAdapter> AnIncubatorImpl_getAdapterInstanceWithNSString_(AnIncubatorImpl *self, NSString *adapterName);

__attribute__((unused)) static void AnIncubatorImpl_ensureAnAttribAdaptersWithAnOrm_withAnAttrib_withOrgJsonJSONObject_(AnIncubatorImpl *self, id<AnOrm> orm, id<AnAttrib> attrib, OrgJsonJSONObject *jo);

__attribute__((unused)) static NSString *AnIncubatorImpl_removeCommentsWithNSString_withNSString_withNSString_(AnIncubatorImpl *self, NSString *string, NSString *begComm, NSString *endComm);

__attribute__((unused)) static void AnIncubatorImpl_loadAdapterMapWithOrgJsonJSONObject_withJavaUtilMap_(AnIncubatorImpl *self, OrgJsonJSONObject *jo, id<JavaUtilMap> converterByNameMap);

__attribute__((unused)) static id<AnOrm> AnIncubatorImpl_makeWithNSString_withJavaUtilMap_(AnIncubatorImpl *self, NSString *className_, id<JavaUtilMap> records);

__attribute__((unused)) static AnIncubatorImpl_AnAssociateRecord *AnIncubatorImpl_getArAssociateRecordWithIOSClass_withAnAttrib_(AnIncubatorImpl *self, IOSClass *cluss, id<AnAttrib> attrib);

@interface AnIncubatorImpl_ErrorContext : NSObject {
 @public
  NSString *contextSchema_;
  NSString *contextObject_;
  NSString *contextAttribute_;
  NSString *contextAssociation_;
  NSString *contextAdapter_;
  NSString *step_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(AnIncubatorImpl_ErrorContext)

J2OBJC_FIELD_SETTER(AnIncubatorImpl_ErrorContext, contextSchema_, NSString *)
J2OBJC_FIELD_SETTER(AnIncubatorImpl_ErrorContext, contextObject_, NSString *)
J2OBJC_FIELD_SETTER(AnIncubatorImpl_ErrorContext, contextAttribute_, NSString *)
J2OBJC_FIELD_SETTER(AnIncubatorImpl_ErrorContext, contextAssociation_, NSString *)
J2OBJC_FIELD_SETTER(AnIncubatorImpl_ErrorContext, contextAdapter_, NSString *)
J2OBJC_FIELD_SETTER(AnIncubatorImpl_ErrorContext, step_, NSString *)

__attribute__((unused)) static void AnIncubatorImpl_ErrorContext_initWithAnIncubatorImpl_(AnIncubatorImpl_ErrorContext *self, AnIncubatorImpl *outer$);

__attribute__((unused)) static AnIncubatorImpl_ErrorContext *new_AnIncubatorImpl_ErrorContext_initWithAnIncubatorImpl_(AnIncubatorImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static AnIncubatorImpl_ErrorContext *create_AnIncubatorImpl_ErrorContext_initWithAnIncubatorImpl_(AnIncubatorImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(AnIncubatorImpl_ErrorContext)

@interface AnIncubatorImpl_AnJsonSchema : NSObject {
 @public
  NSString *name_;
  NSString *version__;
  id<JavaUtilMap> entityRecordMap_;
  id<JavaUtilMap> adapterByNameMap_;
  id<JavaUtilMap> adapters_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(AnIncubatorImpl_AnJsonSchema)

J2OBJC_FIELD_SETTER(AnIncubatorImpl_AnJsonSchema, name_, NSString *)
J2OBJC_FIELD_SETTER(AnIncubatorImpl_AnJsonSchema, version__, NSString *)
J2OBJC_FIELD_SETTER(AnIncubatorImpl_AnJsonSchema, entityRecordMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(AnIncubatorImpl_AnJsonSchema, adapterByNameMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(AnIncubatorImpl_AnJsonSchema, adapters_, id<JavaUtilMap>)

__attribute__((unused)) static void AnIncubatorImpl_AnJsonSchema_initWithAnIncubatorImpl_(AnIncubatorImpl_AnJsonSchema *self, AnIncubatorImpl *outer$);

__attribute__((unused)) static AnIncubatorImpl_AnJsonSchema *new_AnIncubatorImpl_AnJsonSchema_initWithAnIncubatorImpl_(AnIncubatorImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static AnIncubatorImpl_AnJsonSchema *create_AnIncubatorImpl_AnJsonSchema_initWithAnIncubatorImpl_(AnIncubatorImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(AnIncubatorImpl_AnJsonSchema)

@interface AnIncubatorImpl_AnObjectRecord : NSObject {
 @public
  id<AnOrm> orm_;
  NSString *className__;
  NSString *extendObject_;
  id<JavaUtilMap> associationMap_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(AnIncubatorImpl_AnObjectRecord)

J2OBJC_FIELD_SETTER(AnIncubatorImpl_AnObjectRecord, orm_, id<AnOrm>)
J2OBJC_FIELD_SETTER(AnIncubatorImpl_AnObjectRecord, className__, NSString *)
J2OBJC_FIELD_SETTER(AnIncubatorImpl_AnObjectRecord, extendObject_, NSString *)
J2OBJC_FIELD_SETTER(AnIncubatorImpl_AnObjectRecord, associationMap_, id<JavaUtilMap>)

__attribute__((unused)) static void AnIncubatorImpl_AnObjectRecord_initWithAnIncubatorImpl_(AnIncubatorImpl_AnObjectRecord *self, AnIncubatorImpl *outer$);

__attribute__((unused)) static AnIncubatorImpl_AnObjectRecord *new_AnIncubatorImpl_AnObjectRecord_initWithAnIncubatorImpl_(AnIncubatorImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static AnIncubatorImpl_AnObjectRecord *create_AnIncubatorImpl_AnObjectRecord_initWithAnIncubatorImpl_(AnIncubatorImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(AnIncubatorImpl_AnObjectRecord)

@interface AnIncubatorImpl_AnAssociateRecord : NSObject {
 @public
  NSString *assocName_;
  NSString *objectName_;
  NSString *srcAttribName_;
  NSString *trgAttribName_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(AnIncubatorImpl_AnAssociateRecord)

J2OBJC_FIELD_SETTER(AnIncubatorImpl_AnAssociateRecord, assocName_, NSString *)
J2OBJC_FIELD_SETTER(AnIncubatorImpl_AnAssociateRecord, objectName_, NSString *)
J2OBJC_FIELD_SETTER(AnIncubatorImpl_AnAssociateRecord, srcAttribName_, NSString *)
J2OBJC_FIELD_SETTER(AnIncubatorImpl_AnAssociateRecord, trgAttribName_, NSString *)

__attribute__((unused)) static void AnIncubatorImpl_AnAssociateRecord_initWithAnIncubatorImpl_(AnIncubatorImpl_AnAssociateRecord *self, AnIncubatorImpl *outer$);

__attribute__((unused)) static AnIncubatorImpl_AnAssociateRecord *new_AnIncubatorImpl_AnAssociateRecord_initWithAnIncubatorImpl_(AnIncubatorImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static AnIncubatorImpl_AnAssociateRecord *create_AnIncubatorImpl_AnAssociateRecord_initWithAnIncubatorImpl_(AnIncubatorImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(AnIncubatorImpl_AnAssociateRecord)

NSString *AnIncubatorImpl_ADAPTERS = @"adapters";
NSString *AnIncubatorImpl_ADAPTER_MAP = @"adapterMap";
NSString *AnIncubatorImpl_CLASS = @"class";
NSString *AnIncubatorImpl_ASSOCIATIONS = @"associations";
NSString *AnIncubatorImpl_ASSOCIATE = @"fetch";
NSString *AnIncubatorImpl_OBJECT = @"object";
NSString *AnIncubatorImpl_SRC = @"srcAttribName";
NSString *AnIncubatorImpl_DST = @"trgAttribName";

@implementation AnIncubatorImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AnIncubatorImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)load__WithNSString:(NSString *)jsonString {
  eCtx_ = new_AnIncubatorImpl_ErrorContext_initWithAnIncubatorImpl_(self);
  eCtx_->step_ = @"schema";
  jsonString = AnIncubatorImpl_removeCommentsWithNSString_withNSString_withNSString_(self, jsonString, @"/*", @"*/");
  OrgJsonJSONObject *jo = new_OrgJsonJSONObject_initWithNSString_(jsonString);
  anSchema_ = new_AnIncubatorImpl_AnJsonSchema_initWithAnIncubatorImpl_(self);
  anSchema_->name_ = AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withBoolean_(self, AnIncubatorImpl_NAME, jo, true);
  ((AnIncubatorImpl_AnJsonSchema *) nil_chk(anSchema_))->version__ = AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withBoolean_(self, AnIncubatorImpl_VERSION, jo, true);
  ((AnIncubatorImpl_ErrorContext *) nil_chk(eCtx_))->contextSchema_ = ((AnIncubatorImpl_AnJsonSchema *) nil_chk(anSchema_))->name_;
  eCtx_->step_ = @"schema adapters";
  AnIncubatorImpl_loadSchemaAdaptersWithOrgJsonJSONObject_(self, jo);
  ((AnIncubatorImpl_ErrorContext *) nil_chk(eCtx_))->step_ = @"schema adapter maps";
  AnIncubatorImpl_loadAdapterMapWithOrgJsonJSONObject_withJavaUtilMap_(self, jo, ((AnIncubatorImpl_AnJsonSchema *) nil_chk(anSchema_))->adapterByNameMap_);
  if ([jo hasWithNSString:AnIncubatorImpl_OBJECTS]) {
    OrgJsonJSONArray *ja = [jo getJSONArrayWithNSString:AnIncubatorImpl_OBJECTS];
    ((AnIncubatorImpl_AnJsonSchema *) nil_chk(anSchema_))->entityRecordMap_ = AnIncubatorImpl_loadObjectsWithOrgJsonJSONArray_(self, ja);
  }
  eCtx_ = nil;
  isLoaded_ = true;
}

- (void)unload {
  anSchema_ = nil;
  isLoaded_ = false;
}

- (jboolean)isLoaded {
  return isLoaded_;
}

- (id<AnOrm>)makeWithNSString:(NSString *)className_ {
  return AnIncubatorImpl_makeWithNSString_withJavaUtilMap_(self, className_, ((AnIncubatorImpl_AnJsonSchema *) nil_chk(anSchema_))->entityRecordMap_);
}

- (id<AnOrm>)makeWithIOSClass:(IOSClass *)cluss {
  return AnIncubatorImpl_makeWithNSString_withJavaUtilMap_(self, [((IOSClass *) nil_chk(cluss)) getName], ((AnIncubatorImpl_AnJsonSchema *) nil_chk(anSchema_))->entityRecordMap_);
}

- (IOSClass *)getClassByNameWithNSString:(NSString *)name {
  return IOSClass_forName_(name);
}

- (NSString *)getAssociationTrgClassNameWithIOSClass:(IOSClass *)cluss
                                        withAnAttrib:(id<AnAttrib>)attrib {
  AnIncubatorImpl_AnAssociateRecord *ar = AnIncubatorImpl_getArAssociateRecordWithIOSClass_withAnAttrib_(self, cluss, attrib);
  return ((AnIncubatorImpl_AnAssociateRecord *) nil_chk(ar))->objectName_;
}

- (NSString *)getAssociationTrgJoinAttribNameWithIOSClass:(IOSClass *)cluss
                                             withAnAttrib:(id<AnAttrib>)attrib {
  AnIncubatorImpl_AnAssociateRecord *ar = AnIncubatorImpl_getArAssociateRecordWithIOSClass_withAnAttrib_(self, cluss, attrib);
  return ((AnIncubatorImpl_AnAssociateRecord *) nil_chk(ar))->trgAttribName_;
}

- (NSString *)getAssociationSrcJoinAttribNameWithIOSClass:(IOSClass *)cluss
                                             withAnAttrib:(id<AnAttrib>)attrib {
  AnIncubatorImpl_AnAssociateRecord *ar = AnIncubatorImpl_getArAssociateRecordWithIOSClass_withAnAttrib_(self, cluss, attrib);
  return ((AnIncubatorImpl_AnAssociateRecord *) nil_chk(ar))->srcAttribName_;
}

- (NSString *)getAssociationSrcAttribNameWithIOSClass:(IOSClass *)cluss
                                         withAnAttrib:(id<AnAttrib>)attrib {
  AnIncubatorImpl_AnAssociateRecord *ar = AnIncubatorImpl_getArAssociateRecordWithIOSClass_withAnAttrib_(self, cluss, attrib);
  return ((AnIncubatorImpl_AnAssociateRecord *) nil_chk(ar))->assocName_;
}

- (id<SQLighterDb>)getSqLighterDb {
  return sqLighterDb_;
}

- (void)setSqLighterDbWithSQLighterDb:(id<SQLighterDb>)sqLighterDb {
  self->sqLighterDb_ = sqLighterDb;
}

@end

void AnIncubatorImpl_init(AnIncubatorImpl *self) {
  NSObject_init(self);
  self->isLoaded_ = false;
}

AnIncubatorImpl *new_AnIncubatorImpl_init() {
  J2OBJC_NEW_IMPL(AnIncubatorImpl, init)
}

AnIncubatorImpl *create_AnIncubatorImpl_init() {
  J2OBJC_CREATE_IMPL(AnIncubatorImpl, init)
}

NSString *AnIncubatorImpl_getContext(AnIncubatorImpl *self) {
  return JreStrcat("$$$$$$", @" Last known position: ", ((((AnIncubatorImpl_ErrorContext *) nil_chk(self->eCtx_))->step_ == nil) ? @"" : JreStrcat("$$$", @"Step: ", self->eCtx_->step_, @". ")), ((self->eCtx_->contextObject_ == nil) ? @"" : JreStrcat("$$$", @"Object: ", self->eCtx_->contextObject_, @". ")), ((self->eCtx_->contextAttribute_ == nil) ? @"" : JreStrcat("$$$", @"Attrib: ", self->eCtx_->contextAttribute_, @". ")), ((self->eCtx_->contextAssociation_ == nil) ? @"" : JreStrcat("$$$", @"Association: ", self->eCtx_->contextAssociation_, @". ")), ((self->eCtx_->contextAdapter_ == nil) ? @"" : JreStrcat("$$", @"Adapter: ", self->eCtx_->contextAdapter_)));
}

void AnIncubatorImpl_loadSchemaAdaptersWithOrgJsonJSONObject_(AnIncubatorImpl *self, OrgJsonJSONObject *jo) {
  if ([((OrgJsonJSONObject *) nil_chk(jo)) hasWithNSString:AnIncubatorImpl_ADAPTERS]) {
    OrgJsonJSONArray *ja = [jo getJSONArrayWithNSString:AnIncubatorImpl_ADAPTERS];
    jint count = [((OrgJsonJSONArray *) nil_chk(ja)) length];
    for (jint i = 0; i < count; i++) {
      OrgJsonJSONObject *adaptJo = [ja getJSONObjectWithInt:i];
      if ([((OrgJsonJSONObject *) nil_chk(adaptJo)) hasWithNSString:AnIncubatorImpl_JSON_SET_ADAPTER]) {
        (void) [((id<JavaUtilMap>) nil_chk(((AnIncubatorImpl_AnJsonSchema *) nil_chk(self->anSchema_))->adapters_)) putWithId:AnIncubatorImpl_JSON_SET_ADAPTER withId:[adaptJo getStringWithNSString:AnIncubatorImpl_JSON_SET_ADAPTER]];
      }
      else if ([adaptJo hasWithNSString:AnIncubatorImpl_JSON_GET_ADAPTER]) {
        (void) [((id<JavaUtilMap>) nil_chk(((AnIncubatorImpl_AnJsonSchema *) nil_chk(self->anSchema_))->adapters_)) putWithId:AnIncubatorImpl_JSON_GET_ADAPTER withId:[adaptJo getStringWithNSString:AnIncubatorImpl_JSON_GET_ADAPTER]];
      }
      else if ([adaptJo hasWithNSString:AnIncubatorImpl_DB_SET_ADAPTER]) {
        (void) [((id<JavaUtilMap>) nil_chk(((AnIncubatorImpl_AnJsonSchema *) nil_chk(self->anSchema_))->adapters_)) putWithId:AnIncubatorImpl_DB_SET_ADAPTER withId:[adaptJo getStringWithNSString:AnIncubatorImpl_DB_SET_ADAPTER]];
      }
      else if ([adaptJo hasWithNSString:AnIncubatorImpl_DB_GET_ADAPTER]) {
        (void) [((id<JavaUtilMap>) nil_chk(((AnIncubatorImpl_AnJsonSchema *) nil_chk(self->anSchema_))->adapters_)) putWithId:AnIncubatorImpl_DB_GET_ADAPTER withId:[adaptJo getStringWithNSString:AnIncubatorImpl_DB_GET_ADAPTER]];
      }
    }
  }
}

id<JavaUtilMap> AnIncubatorImpl_loadObjectsWithOrgJsonJSONArray_(AnIncubatorImpl *self, OrgJsonJSONArray *jsonArray) {
  ((AnIncubatorImpl_ErrorContext *) nil_chk(self->eCtx_))->step_ = AnIncubatorImpl_OBJECTS;
  id<JavaUtilMap> objRecMap = new_JavaUtilHashMap_init();
  jint itemCount = [((OrgJsonJSONArray *) nil_chk(jsonArray)) length];
  for (jint i = 0; i < itemCount; i++) {
    OrgJsonJSONObject *jo = [jsonArray getJSONObjectWithInt:i];
    AnIncubatorImpl_AnObjectRecord *objectRecord = AnIncubatorImpl_loadAnObjectRecordWithOrgJsonJSONObject_(self, jo);
    (void) [objRecMap putWithId:((AnIncubatorImpl_AnObjectRecord *) nil_chk(objectRecord))->className__ withId:objectRecord];
  }
  return objRecMap;
}

AnIncubatorImpl_AnObjectRecord *AnIncubatorImpl_loadAnObjectRecordWithOrgJsonJSONObject_(AnIncubatorImpl *self, OrgJsonJSONObject *jo) {
  AnIncubatorImpl_AnObjectRecord *rec = new_AnIncubatorImpl_AnObjectRecord_initWithAnIncubatorImpl_(self);
  ((AnIncubatorImpl_ErrorContext *) nil_chk(self->eCtx_))->step_ = AnIncubatorImpl_OBJECT;
  rec->orm_ = new_AnOrmImpl_init();
  rec->className__ = AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withBoolean_(self, AnIncubatorImpl_CLASS_NAME, jo, true);
  ((AnIncubatorImpl_ErrorContext *) nil_chk(self->eCtx_))->contextObject_ = rec->className__;
  rec->extendObject_ = AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withBoolean_(self, AnIncubatorImpl_EXTENDS, jo, false);
  [((id<AnOrm>) nil_chk(rec->orm_)) setNativeClassWithIOSClass:[self getClassByNameWithNSString:rec->className__]];
  AnIncubatorImpl_ensureAnObjectAdaptersWithAnOrm_withOrgJsonJSONObject_(self, rec->orm_, jo);
  NSString *assignedTableName = AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withBoolean_(self, AnIncubatorImpl_TABLE_NAME, jo, false);
  if (assignedTableName == nil) {
    [((id<AnOrm>) nil_chk(rec->orm_)) setTableNameWithNSString:[((IOSClass *) nil_chk([rec->orm_ getNativeClass])) getSimpleName]];
  }
  else {
    [((id<AnOrm>) nil_chk(rec->orm_)) setTableNameWithNSString:assignedTableName];
  }
  AnIncubatorImpl_ensureAttributesWithAnOrm_withOrgJsonJSONObject_withAnIncubatorImpl_AnObjectRecord_(self, rec->orm_, jo, rec);
  ((AnIncubatorImpl_ErrorContext *) nil_chk(self->eCtx_))->contextAttribute_ = nil;
  AnIncubatorImpl_ensureAssociationsWithOrgJsonJSONObject_withAnIncubatorImpl_AnObjectRecord_(self, jo, rec);
  ((AnIncubatorImpl_ErrorContext *) nil_chk(self->eCtx_))->contextAssociation_ = nil;
  return rec;
}

NSString *AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withBoolean_(AnIncubatorImpl *self, NSString *name, OrgJsonJSONObject *jo, jboolean required) {
  if ([((OrgJsonJSONObject *) nil_chk(jo)) hasWithNSString:name]) {
    NSString *value = [jo getStringWithNSString:name];
    return value;
  }
  if (required) {
    @throw new_JavaLangException_initWithNSString_(JreStrcat("$$$", @"missing: ", name, AnIncubatorImpl_getContext(self)));
  }
  return nil;
}

void AnIncubatorImpl_ensureAttributesWithAnOrm_withOrgJsonJSONObject_withAnIncubatorImpl_AnObjectRecord_(AnIncubatorImpl *self, id<AnOrm> orm, OrgJsonJSONObject *jo, AnIncubatorImpl_AnObjectRecord *rec) {
  if ([((OrgJsonJSONObject *) nil_chk(jo)) hasWithNSString:AnIncubatorImpl_ATTRIBUTES]) {
    ((AnIncubatorImpl_ErrorContext *) nil_chk(self->eCtx_))->step_ = AnIncubatorImpl_ATTRIBUTES;
    OrgJsonJSONArray *attribArray = [jo getJSONArrayWithNSString:AnIncubatorImpl_ATTRIBUTES];
    for (jint i = 0; i < [((OrgJsonJSONArray *) nil_chk(attribArray)) length]; i++) {
      OrgJsonJSONObject *attribDefinition = [attribArray getJSONObjectWithInt:i];
      NSString *attribName = AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withBoolean_(self, AnIncubatorImpl_ATTRIB_NAME, attribDefinition, true);
      ((AnIncubatorImpl_ErrorContext *) nil_chk(self->eCtx_))->contextAttribute_ = attribName;
      NSString *columnName = AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withBoolean_(self, AnIncubatorImpl_COLUMN_NAME, attribDefinition, false);
      NSString *jsonName = AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withBoolean_(self, AnIncubatorImpl_JSON_NAME, attribDefinition, false);
      NSString *columnDef = AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withBoolean_(self, AnIncubatorImpl_DB_COLUMN_DEFINITION, attribDefinition, false);
      id<AnAttrib> anAttrib = nil;
      if ([((NSString *) nil_chk(attribName)) java_indexOf:','] != -1) {
        anAttrib = new_AnAttribImpl_initWithNSString_(attribName);
      }
      else {
        anAttrib = new_AnAttribImpl_initWithNSString_withNSString_withNSString_(attribName, columnName, jsonName);
      }
      [anAttrib setDbColumnDefinitionWithNSString:columnDef];
      AnIncubatorImpl_ensureAnAttribAdaptersWithAnOrm_withAnAttrib_withOrgJsonJSONObject_(self, orm, anAttrib, attribDefinition);
      [((id<AnOrm>) nil_chk(orm)) addAttribWithAnAttrib:anAttrib];
    }
  }
}

void AnIncubatorImpl_ensureAssociationsWithOrgJsonJSONObject_withAnIncubatorImpl_AnObjectRecord_(AnIncubatorImpl *self, OrgJsonJSONObject *jo, AnIncubatorImpl_AnObjectRecord *rec) {
  if ([((OrgJsonJSONObject *) nil_chk(jo)) hasWithNSString:AnIncubatorImpl_ASSOCIATIONS]) {
    ((AnIncubatorImpl_ErrorContext *) nil_chk(self->eCtx_))->step_ = JreStrcat("$C$", AnIncubatorImpl_ATTRIBUTES, '/', AnIncubatorImpl_ASSOCIATIONS);
    OrgJsonJSONArray *assocArray = [jo getJSONArrayWithNSString:AnIncubatorImpl_ASSOCIATIONS];
    for (jint i = 0; i < [((OrgJsonJSONArray *) nil_chk(assocArray)) length]; i++) {
      OrgJsonJSONObject *associationJo = [assocArray getJSONObjectWithInt:i];
      AnIncubatorImpl_AnAssociateRecord *ar = new_AnIncubatorImpl_AnAssociateRecord_initWithAnIncubatorImpl_(self);
      ar->assocName_ = AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withBoolean_(self, AnIncubatorImpl_NAME, associationJo, true);
      ((AnIncubatorImpl_ErrorContext *) nil_chk(self->eCtx_))->contextAssociation_ = ar->assocName_;
      ar->objectName_ = AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withBoolean_(self, AnIncubatorImpl_OBJECT, associationJo, true);
      ar->srcAttribName_ = AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withBoolean_(self, AnIncubatorImpl_SRC, associationJo, true);
      ar->trgAttribName_ = AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withBoolean_(self, AnIncubatorImpl_DST, associationJo, true);
      (void) [((id<JavaUtilMap>) nil_chk(((AnIncubatorImpl_AnObjectRecord *) nil_chk(rec))->associationMap_)) putWithId:ar->assocName_ withId:ar];
    }
  }
}

void AnIncubatorImpl_ensureAnObjectAdaptersWithAnOrm_withOrgJsonJSONObject_(AnIncubatorImpl *self, id<AnOrm> orm, OrgJsonJSONObject *jo) {
  IOSClass *clussjs = AnIncubatorImpl_getAdapterClassWithNSString_(self, AnIncubatorImpl_JSON_SET_ADAPTER);
  if (clussjs != nil) {
    [((id<AnOrm>) nil_chk(orm)) setJsonSetAdapterWithAnAdapter:(id<AnAdapter>) cast_check([clussjs newInstance], AnAdapter_class_())];
  }
  IOSClass *clussjg = AnIncubatorImpl_getAdapterClassWithNSString_(self, AnIncubatorImpl_JSON_GET_ADAPTER);
  if (clussjg != nil) {
    [((id<AnOrm>) nil_chk(orm)) setJsonGetAdapterWithAnAdapter:(id<AnAdapter>) cast_check([clussjg newInstance], AnAdapter_class_())];
  }
  IOSClass *clussds = AnIncubatorImpl_getAdapterClassWithNSString_(self, AnIncubatorImpl_DB_SET_ADAPTER);
  if (clussds != nil) {
    [((id<AnOrm>) nil_chk(orm)) setDbSetAdapterWithAnAdapter:(id<AnAdapter>) cast_check([clussds newInstance], AnAdapter_class_())];
  }
  IOSClass *clussdg = AnIncubatorImpl_getAdapterClassWithNSString_(self, AnIncubatorImpl_DB_GET_ADAPTER);
  if (clussdg != nil) {
    [((id<AnOrm>) nil_chk(orm)) setDbGetAdapterWithAnAdapter:(id<AnAdapter>) cast_check([clussdg newInstance], AnAdapter_class_())];
  }
  if ([((OrgJsonJSONObject *) nil_chk(jo)) hasWithNSString:AnIncubatorImpl_ADAPTERS]) {
    OrgJsonJSONArray *ja = [jo getJSONArrayWithNSString:AnIncubatorImpl_ADAPTERS];
    jint count = [((OrgJsonJSONArray *) nil_chk(ja)) length];
    for (jint i = 0; i < count; i++) {
      OrgJsonJSONObject *converterJo = [ja getJSONObjectWithInt:i];
      if ([((OrgJsonJSONObject *) nil_chk(converterJo)) hasWithNSString:AnIncubatorImpl_JSON_SET_ADAPTER]) {
        NSString *adapterName = [converterJo getStringWithNSString:AnIncubatorImpl_JSON_SET_ADAPTER];
        if (adapterName != nil && ![((NSString *) nil_chk(AnIncubatorImpl_NULL_STRING)) isEqual:adapterName]) {
          id<AnAdapter> converter = AnIncubatorImpl_getAdapterInstanceWithNSString_(self, adapterName);
          [((id<AnOrm>) nil_chk(orm)) setJsonSetAdapterWithAnAdapter:converter];
        }
        else if ([((NSString *) nil_chk(AnIncubatorImpl_NULL_STRING)) isEqual:adapterName]) {
          [((id<AnOrm>) nil_chk(orm)) setJsonSetAdapterWithAnAdapter:nil];
        }
      }
      if ([converterJo hasWithNSString:AnIncubatorImpl_JSON_GET_ADAPTER]) {
        NSString *adapterName = [converterJo getStringWithNSString:AnIncubatorImpl_JSON_GET_ADAPTER];
        if (adapterName != nil && ![((NSString *) nil_chk(AnIncubatorImpl_NULL_STRING)) isEqual:adapterName]) {
          id<AnAdapter> converter = AnIncubatorImpl_getAdapterInstanceWithNSString_(self, adapterName);
          [((id<AnOrm>) nil_chk(orm)) setJsonGetAdapterWithAnAdapter:converter];
        }
        else if ([((NSString *) nil_chk(AnIncubatorImpl_NULL_STRING)) isEqual:adapterName]) {
          [((id<AnOrm>) nil_chk(orm)) setJsonGetAdapterWithAnAdapter:nil];
        }
      }
      if ([converterJo hasWithNSString:AnIncubatorImpl_DB_SET_ADAPTER]) {
        NSString *adapterName = [converterJo getStringWithNSString:AnIncubatorImpl_DB_SET_ADAPTER];
        if (adapterName != nil && ![((NSString *) nil_chk(AnIncubatorImpl_NULL_STRING)) isEqual:adapterName]) {
          id<AnAdapter> converter = AnIncubatorImpl_getAdapterInstanceWithNSString_(self, adapterName);
          [((id<AnOrm>) nil_chk(orm)) setDbSetAdapterWithAnAdapter:converter];
        }
        else if ([((NSString *) nil_chk(AnIncubatorImpl_NULL_STRING)) isEqual:adapterName]) {
          [((id<AnOrm>) nil_chk(orm)) setDbSetAdapterWithAnAdapter:nil];
        }
      }
      if ([converterJo hasWithNSString:AnIncubatorImpl_DB_GET_ADAPTER]) {
        NSString *adapterName = [converterJo getStringWithNSString:AnIncubatorImpl_DB_GET_ADAPTER];
        if (adapterName != nil && ![((NSString *) nil_chk(AnIncubatorImpl_NULL_STRING)) isEqual:adapterName]) {
          id<AnAdapter> converter = AnIncubatorImpl_getAdapterInstanceWithNSString_(self, adapterName);
          [((id<AnOrm>) nil_chk(orm)) setDbGetAdapterWithAnAdapter:converter];
        }
        else if ([((NSString *) nil_chk(AnIncubatorImpl_NULL_STRING)) isEqual:adapterName]) {
          [((id<AnOrm>) nil_chk(orm)) setDbGetAdapterWithAnAdapter:nil];
        }
      }
    }
  }
}

IOSClass *AnIncubatorImpl_getAdapterClassWithNSString_(AnIncubatorImpl *self, NSString *adapterName) {
  NSString *name = [((id<JavaUtilMap>) nil_chk(((AnIncubatorImpl_AnJsonSchema *) nil_chk(self->anSchema_))->adapters_)) getWithId:adapterName];
  if (name != nil) {
    IOSClass *cluss = [((id<JavaUtilMap>) nil_chk(((AnIncubatorImpl_AnJsonSchema *) nil_chk(self->anSchema_))->adapterByNameMap_)) getWithId:name];
    return cluss;
  }
  return nil;
}

id<AnAdapter> AnIncubatorImpl_getAdapterInstanceWithNSString_(AnIncubatorImpl *self, NSString *adapterName) {
  IOSClass *cluss = [((id<JavaUtilMap>) nil_chk(((AnIncubatorImpl_AnJsonSchema *) nil_chk(self->anSchema_))->adapterByNameMap_)) getWithId:adapterName];
  if (cluss != nil) {
    return (id<AnAdapter>) cast_check([cluss newInstance], AnAdapter_class_());
  }
  @throw new_JavaLangException_initWithNSString_(JreStrcat("$$$", @"Missing adapter: ", adapterName, AnIncubatorImpl_getContext(self)));
}

void AnIncubatorImpl_ensureAnAttribAdaptersWithAnOrm_withAnAttrib_withOrgJsonJSONObject_(AnIncubatorImpl *self, id<AnOrm> orm, id<AnAttrib> attrib, OrgJsonJSONObject *jo) {
  [((id<AnAttrib>) nil_chk(attrib)) setJsonSetAdapterWithAnAdapter:[((id<AnOrm>) nil_chk(orm)) getJsonSetAdapter]];
  [attrib setJsonGetAdapterWithAnAdapter:[orm getJsonGetAdapter]];
  [attrib setDbSetAdapterWithAnAdapter:[orm getDbSetAdapter]];
  [attrib setDbGetAdapterWithAnAdapter:[orm getDbGetAdapter]];
  if ([((OrgJsonJSONObject *) nil_chk(jo)) hasWithNSString:AnIncubatorImpl_ADAPTERS]) {
    OrgJsonJSONArray *ja = [jo getJSONArrayWithNSString:AnIncubatorImpl_ADAPTERS];
    jint count = [((OrgJsonJSONArray *) nil_chk(ja)) length];
    for (jint i = 0; i < count; i++) {
      OrgJsonJSONObject *adapterJo = [ja getJSONObjectWithInt:i];
      if ([((OrgJsonJSONObject *) nil_chk(adapterJo)) hasWithNSString:AnIncubatorImpl_JSON_SET_ADAPTER]) {
        NSString *adapterName = [adapterJo getStringWithNSString:AnIncubatorImpl_JSON_SET_ADAPTER];
        if (adapterName != nil && ![((NSString *) nil_chk(AnIncubatorImpl_NULL_STRING)) isEqual:adapterName]) {
          id<AnAdapter> converter = AnIncubatorImpl_getAdapterInstanceWithNSString_(self, adapterName);
          [attrib setJsonSetAdapterWithAnAdapter:converter];
        }
        else if ([((NSString *) nil_chk(AnIncubatorImpl_NULL_STRING)) isEqual:adapterName]) {
          [attrib setJsonSetAdapterWithAnAdapter:nil];
        }
      }
      if ([adapterJo hasWithNSString:AnIncubatorImpl_JSON_GET_ADAPTER]) {
        NSString *adapterName = [adapterJo getStringWithNSString:AnIncubatorImpl_JSON_GET_ADAPTER];
        if (adapterName != nil && ![((NSString *) nil_chk(AnIncubatorImpl_NULL_STRING)) isEqual:adapterName]) {
          id<AnAdapter> converter = AnIncubatorImpl_getAdapterInstanceWithNSString_(self, adapterName);
          [attrib setJsonGetAdapterWithAnAdapter:converter];
        }
        else if ([((NSString *) nil_chk(AnIncubatorImpl_NULL_STRING)) isEqual:adapterName]) {
          [attrib setJsonGetAdapterWithAnAdapter:nil];
        }
      }
      if ([adapterJo hasWithNSString:AnIncubatorImpl_DB_SET_ADAPTER]) {
        NSString *adapterName = [adapterJo getStringWithNSString:AnIncubatorImpl_DB_SET_ADAPTER];
        if (adapterName != nil && ![((NSString *) nil_chk(AnIncubatorImpl_NULL_STRING)) isEqual:adapterName]) {
          id<AnAdapter> converter = AnIncubatorImpl_getAdapterInstanceWithNSString_(self, adapterName);
          [attrib setDbSetAdapterWithAnAdapter:converter];
        }
        else if ([((NSString *) nil_chk(AnIncubatorImpl_NULL_STRING)) isEqual:adapterName]) {
          [attrib setDbSetAdapterWithAnAdapter:nil];
        }
      }
      if ([adapterJo hasWithNSString:AnIncubatorImpl_DB_GET_ADAPTER]) {
        NSString *adapterName = [adapterJo getStringWithNSString:AnIncubatorImpl_DB_GET_ADAPTER];
        if (adapterName != nil && ![((NSString *) nil_chk(AnIncubatorImpl_NULL_STRING)) isEqual:adapterName]) {
          id<AnAdapter> converter = AnIncubatorImpl_getAdapterInstanceWithNSString_(self, adapterName);
          [attrib setDbGetAdapterWithAnAdapter:converter];
        }
        else if ([((NSString *) nil_chk(AnIncubatorImpl_NULL_STRING)) isEqual:adapterName]) {
          [attrib setDbGetAdapterWithAnAdapter:nil];
        }
      }
    }
  }
}

NSString *AnIncubatorImpl_removeCommentsWithNSString_withNSString_withNSString_(AnIncubatorImpl *self, NSString *string, NSString *begComm, NSString *endComm) {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(string);
  jint cb = -1;
  jint ce = -1;
  jint endCommLength = [((NSString *) nil_chk(endComm)) java_length];
  do {
    cb = [sb indexOfWithNSString:begComm];
    ce = [sb indexOfWithNSString:endComm];
    if (cb == -1 && ce == -1) {
      break;
    }
    else if (cb == -1 || ce == -1) {
      return nil;
    }
    else {
      (void) [sb delete__WithInt:cb withInt:ce + endCommLength];
    }
  }
  while (true);
  return [sb description];
}

void AnIncubatorImpl_loadAdapterMapWithOrgJsonJSONObject_withJavaUtilMap_(AnIncubatorImpl *self, OrgJsonJSONObject *jo, id<JavaUtilMap> converterByNameMap) {
  if ([((OrgJsonJSONObject *) nil_chk(jo)) hasWithNSString:AnIncubatorImpl_ADAPTER_MAP]) {
    OrgJsonJSONArray *ja = [jo getJSONArrayWithNSString:AnIncubatorImpl_ADAPTER_MAP];
    jint count = [((OrgJsonJSONArray *) nil_chk(ja)) length];
    for (jint i = 0; i < count; i++) {
      OrgJsonJSONObject *convertedJo = [ja getJSONObjectWithInt:i];
      NSString *name = AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withBoolean_(self, AnIncubatorImpl_NAME, convertedJo, true);
      (void) [((OrgJsonJSONObject *) nil_chk(convertedJo)) getStringWithNSString:AnIncubatorImpl_NAME];
      NSString *className_ = AnIncubatorImpl_ensurePropertyWithNSString_withOrgJsonJSONObject_withBoolean_(self, AnIncubatorImpl_CLASS, convertedJo, true);
      IOSClass *cluss = [self getClassByNameWithNSString:className_];
      (void) [((id<JavaUtilMap>) nil_chk(converterByNameMap)) putWithId:name withId:cluss];
    }
  }
}

id<AnOrm> AnIncubatorImpl_makeWithNSString_withJavaUtilMap_(AnIncubatorImpl *self, NSString *className_, id<JavaUtilMap> records) {
  if (records == nil) {
    @throw new_JavaLangException_initWithNSString_(@"No object definitions loaded.");
  }
  AnIncubatorImpl_AnObjectRecord *anObjRec = [records getWithId:className_];
  if (anObjRec == nil) {
    @throw new_JavaLangException_initWithNSString_(JreStrcat("$$", @"Could not find definition for ", className_));
  }
  id<AnOrm> anOrm = new_AnOrmImpl_init();
  [anOrm setTableNameWithNSString:[((id<AnOrm>) nil_chk(anObjRec->orm_)) getTableName]];
  [anOrm setNativeClassWithIOSClass:[((id<AnOrm>) nil_chk(anObjRec->orm_)) getNativeClass]];
  [anOrm setJsonSetAdapterWithAnAdapter:[((id<AnOrm>) nil_chk(anObjRec->orm_)) getJsonSetAdapter]];
  [anOrm setJsonGetAdapterWithAnAdapter:[((id<AnOrm>) nil_chk(anObjRec->orm_)) getJsonGetAdapter]];
  [anOrm setDbSetAdapterWithAnAdapter:[((id<AnOrm>) nil_chk(anObjRec->orm_)) getDbSetAdapter]];
  [anOrm setDbGetAdapterWithAnAdapter:[((id<AnOrm>) nil_chk(anObjRec->orm_)) getDbGetAdapter]];
  {
    IOSObjectArray *a__ = [((id<AnOrm>) nil_chk(anObjRec->orm_)) getOwnAttribs];
    id<AnAttrib> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<AnAttrib> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<AnAttrib> attr = *b__++;
      id<AnAttrib> anAttrib = new_AnAttribImpl_init();
      [anAttrib setAttribNameWithNSString:[((id<AnAttrib>) nil_chk(attr)) getAttribName]];
      [anAttrib setColumnNameWithNSString:[attr getColumnName]];
      [anAttrib setJsonNameWithNSString:[attr getJsonName]];
      [anAttrib setJsonSetAdapterWithAnAdapter:[attr getJsonSetAdapter]];
      [anAttrib setJsonGetAdapterWithAnAdapter:[attr getJsonGetAdapter]];
      [anAttrib setDbSetAdapterWithAnAdapter:[attr getDbSetAdapter]];
      [anAttrib setDbGetAdapterWithAnAdapter:[attr getDbGetAdapter]];
      [anAttrib setDbColumnDefinitionWithNSString:[attr getDbColumnDefinition]];
      [anOrm addAttribWithAnAttrib:anAttrib];
    }
  }
  if (anObjRec->extendObject_ != nil) {
    id<AnOrm> dependsOn = AnIncubatorImpl_makeWithNSString_withJavaUtilMap_(self, anObjRec->extendObject_, records);
    [anOrm setParentAnObjectWithAnObject:dependsOn];
  }
  [anOrm setIncubatorWithAnIncubator:self];
  [anOrm setSqlighterDbWithSQLighterDb:self->sqLighterDb_];
  return anOrm;
}

AnIncubatorImpl_AnAssociateRecord *AnIncubatorImpl_getArAssociateRecordWithIOSClass_withAnAttrib_(AnIncubatorImpl *self, IOSClass *cluss, id<AnAttrib> attrib) {
  if (cluss == nil || attrib == nil) {
    @throw new_JavaLangException_initWithNSString_(@"Wrong parameters");
  }
  AnIncubatorImpl_AnObjectRecord *anObjRec = [((id<JavaUtilMap>) nil_chk(((AnIncubatorImpl_AnJsonSchema *) nil_chk(self->anSchema_))->entityRecordMap_)) getWithId:[cluss getName]];
  if (anObjRec == nil) {
    @throw new_JavaLangException_initWithNSString_(JreStrcat("$$", @"Undefined class: ", [cluss getName]));
  }
  AnIncubatorImpl_AnAssociateRecord *ar = [((id<JavaUtilMap>) nil_chk(anObjRec->associationMap_)) getWithId:[attrib getAttribName]];
  if (ar == nil) {
    @throw new_JavaLangException_initWithNSString_(JreStrcat("$$", @"Undefined association for: ", [attrib getAttribName]));
  }
  return ar;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AnIncubatorImpl)

@implementation AnIncubatorImpl_ErrorContext

@end

void AnIncubatorImpl_ErrorContext_initWithAnIncubatorImpl_(AnIncubatorImpl_ErrorContext *self, AnIncubatorImpl *outer$) {
  NSObject_init(self);
}

AnIncubatorImpl_ErrorContext *new_AnIncubatorImpl_ErrorContext_initWithAnIncubatorImpl_(AnIncubatorImpl *outer$) {
  J2OBJC_NEW_IMPL(AnIncubatorImpl_ErrorContext, initWithAnIncubatorImpl_, outer$)
}

AnIncubatorImpl_ErrorContext *create_AnIncubatorImpl_ErrorContext_initWithAnIncubatorImpl_(AnIncubatorImpl *outer$) {
  J2OBJC_CREATE_IMPL(AnIncubatorImpl_ErrorContext, initWithAnIncubatorImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AnIncubatorImpl_ErrorContext)

@implementation AnIncubatorImpl_AnJsonSchema

@end

void AnIncubatorImpl_AnJsonSchema_initWithAnIncubatorImpl_(AnIncubatorImpl_AnJsonSchema *self, AnIncubatorImpl *outer$) {
  NSObject_init(self);
  self->adapterByNameMap_ = new_JavaUtilHashMap_init();
  self->adapters_ = new_JavaUtilHashMap_init();
}

AnIncubatorImpl_AnJsonSchema *new_AnIncubatorImpl_AnJsonSchema_initWithAnIncubatorImpl_(AnIncubatorImpl *outer$) {
  J2OBJC_NEW_IMPL(AnIncubatorImpl_AnJsonSchema, initWithAnIncubatorImpl_, outer$)
}

AnIncubatorImpl_AnJsonSchema *create_AnIncubatorImpl_AnJsonSchema_initWithAnIncubatorImpl_(AnIncubatorImpl *outer$) {
  J2OBJC_CREATE_IMPL(AnIncubatorImpl_AnJsonSchema, initWithAnIncubatorImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AnIncubatorImpl_AnJsonSchema)

@implementation AnIncubatorImpl_AnObjectRecord

@end

void AnIncubatorImpl_AnObjectRecord_initWithAnIncubatorImpl_(AnIncubatorImpl_AnObjectRecord *self, AnIncubatorImpl *outer$) {
  NSObject_init(self);
  self->associationMap_ = new_JavaUtilHashMap_init();
}

AnIncubatorImpl_AnObjectRecord *new_AnIncubatorImpl_AnObjectRecord_initWithAnIncubatorImpl_(AnIncubatorImpl *outer$) {
  J2OBJC_NEW_IMPL(AnIncubatorImpl_AnObjectRecord, initWithAnIncubatorImpl_, outer$)
}

AnIncubatorImpl_AnObjectRecord *create_AnIncubatorImpl_AnObjectRecord_initWithAnIncubatorImpl_(AnIncubatorImpl *outer$) {
  J2OBJC_CREATE_IMPL(AnIncubatorImpl_AnObjectRecord, initWithAnIncubatorImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AnIncubatorImpl_AnObjectRecord)

@implementation AnIncubatorImpl_AnAssociateRecord

@end

void AnIncubatorImpl_AnAssociateRecord_initWithAnIncubatorImpl_(AnIncubatorImpl_AnAssociateRecord *self, AnIncubatorImpl *outer$) {
  NSObject_init(self);
}

AnIncubatorImpl_AnAssociateRecord *new_AnIncubatorImpl_AnAssociateRecord_initWithAnIncubatorImpl_(AnIncubatorImpl *outer$) {
  J2OBJC_NEW_IMPL(AnIncubatorImpl_AnAssociateRecord, initWithAnIncubatorImpl_, outer$)
}

AnIncubatorImpl_AnAssociateRecord *create_AnIncubatorImpl_AnAssociateRecord_initWithAnIncubatorImpl_(AnIncubatorImpl *outer$) {
  J2OBJC_CREATE_IMPL(AnIncubatorImpl_AnAssociateRecord, initWithAnIncubatorImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AnIncubatorImpl_AnAssociateRecord)
